{"version":3,"file":"quiz_toolboxes.min.js","sources":["../src/quiz_toolboxes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage all toolbox in the quiz question edit page.\n *\n * @module     mod_quiz/quiz_toolboxes\n * @copyright  2024 The Open University.\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport {getString, getStrings} from 'core/str';\nimport Prefetch from 'core/prefetch';\nimport {slot, util, page} from 'mod_quiz/quiz_utils';\nimport Notification from 'core/notification';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\n\n// The CSS classes we use.\nconst CSS = {\n        ACTIVITYINSTANCE: 'activityinstance',\n        AVAILABILITYINFODIV: 'div.availabilityinfo',\n        CONTENTWITHOUTLINK: 'contentwithoutlink',\n        CONDITIONALHIDDEN: 'conditionalhidden',\n        DIMCLASS: 'dimmed',\n        DIMMEDTEXT: 'dimmed_text',\n        EDITINSTRUCTIONS: 'editinstructions',\n        EDITINGMAXMARK: 'editor_displayed',\n        HIDE: 'hide',\n        JOIN: 'page_join',\n        MODINDENTCOUNT: 'mod-indent-',\n        MODINDENTHUGE: 'mod-indent-huge',\n        PAGE: 'page',\n        SECTIONHIDDENCLASS: 'hidden',\n        SECTIONIDPREFIX: 'section-',\n        SELECTMULTIPLE: 'select-multiple',\n        SLOT: 'slot',\n        SHOW: 'editing_show',\n        TITLEEDITOR: 'titleeditor'\n    },\n    // The CSS selectors we use.\n    SELECTOR = {\n        ACTIONAREA: '.actions',\n        ACTIONLINKTEXT: '.actionlinktext',\n        ACTIVITYACTION: 'a.cm-edit-action[data-action], a.editing_maxmark, a.editing_section, input.shuffle_questions',\n        ACTIVITYFORM: 'span.instancemaxmarkcontainer form',\n        ACTIVITYINSTANCE: '.' + CSS.ACTIVITYINSTANCE,\n        SECTIONINSTANCE: '.sectioninstance',\n        ACTIVITYLI: 'li.activity, li.section',\n        ACTIVITYMAXMARK: 'input[name=maxmark]',\n        COMMANDSPAN: '.commands',\n        CONFIGTOOLBOX: '.config-toolbox',\n        CONTENTAFTERLINK: 'div.contentafterlink',\n        CONTENTWITHOUTLINK: 'div.contentwithoutlink',\n        DELETESECTIONICON: 'a.editing_delete .icon',\n        EDITMAXMARK: 'a.editing_maxmark',\n        EDITSECTION: 'a.editing_section',\n        EDITSECTIONICON: 'a.editing_section .icon',\n        EDITSHUFFLEQUESTIONSACTION: 'input.cm-edit-action[data-action]',\n        EDITSHUFFLEAREA: '.instanceshufflequestions .shuffle-progress',\n        HIDE: 'a.editing_hide',\n        HIGHLIGHT: 'a.editing_highlight',\n        INSTANCENAME: 'span.instancename',\n        INSTANCEMAXMARK: 'span.instancemaxmark',\n        INSTANCESECTION: 'span.instancesection',\n        INSTANCESECTIONAREA: 'div.section-heading',\n        MAXMARKCONTAINER: '.instancemaxmarkcontainer',\n        MODINDENTDIV: '.mod-indent',\n        MODINDENTOUTER: '.mod-indent-outer',\n        NUMQUESTIONS: '.numberofquestions',\n        PAGECONTENT: 'div#page-content',\n        PAGELI: 'li.page',\n        SECTIONLI: 'li.section',\n        SECTIONUL: 'ul.section',\n        SECTIONFORM: '.instancesectioncontainer form',\n        SECTIONINPUT: 'input[name=section]',\n        SELECTMULTIPLEBUTTON: '#selectmultiplecommand',\n        SELECTMULTIPLECANCELBUTTON: '#selectmultiplecancelcommand',\n        SELECTMULTIPLECHECKBOX: '.select-multiple-checkbox',\n        SELECTMULTIPLEDELETEBUTTON: '#selectmultipledeletecommand',\n        SELECTALL: '#questionselectall',\n        SHOW: 'a.' + CSS.SHOW,\n        SLOTLI: 'li.slot',\n        SUMMARKS: '.mod_quiz_summarks'\n    },\n    BODY = document.body;\n\nPrefetch.prefetchStrings('quiz',\n    ['numquestionsx', 'cannotremoveslots', 'cannotremoveallsectionslots', 'confirmremovequestion',\n        'confirmremovesectionheading', 'sectionnoname', 'sectionnoname', 'sectionheadingedit', 'sectionheadingedit',\n        'sectionheadingremove', 'sectionheadingremove', 'areyousureremoveselected']);\n\nPrefetch.prefetchStrings('moodle', ['edittitleinstructions', 'confirm',\n    'yes', 'confirm', 'edittitleinstructions']);\n\n/**\n * Resource and activity toolbox class.\n *\n * This class is responsible for managing AJAX interactions with activities and resources\n * when viewing a course in editing mode.\n */\nclass ToolBox {\n    config = {};\n    quizId = 0;\n    courseId = 0;\n\n    constructor(config, courseId, quizId) {\n        this.config = config;\n        this.courseId = courseId;\n        this.quizId = quizId;\n    }\n    /**\n     * Send a request using the REST API\n     *\n     * @param {Object} data The data to submit with the AJAX request\n     * @param {HTMLElement} [loadingElement] A element that need to be added spinner.\n     * @param {String} methodName The service name.\n     * @param {Object} [optionalConfig] Any additional configuration to submit\n     * @chainable\n     */\n    sendRequest(data, loadingElement, methodName, optionalConfig) {\n        const parameters = {\n            methodname: methodName,\n            args: data,\n        };\n\n        // Apply optional config\n        if (optionalConfig) {\n            for (let varName in optionalConfig) {\n                config[varName] = optionalConfig[varName];\n            }\n        }\n        let spinner = null;\n\n        if (loadingElement !== null) {\n            spinner = addIconToContainerWithPromise(loadingElement);\n        }\n\n        return fetchMany([parameters])[0].then(response => {\n            if (spinner !== null) {\n                spinner.resolve();\n            }\n\n            if (response.newnumquestions) {\n                getString('numquestionsx', 'quiz', response.newnumquestions).then(string => {\n                    document.querySelector(SELECTOR.NUMQUESTIONS).innerHTML = string;\n                });\n            }\n            if (response.newsummarks) {\n                document.querySelector(SELECTOR.SUMMARKS).innerHTML = response.newsummarks;\n            }\n\n            return response;\n        });\n    }\n}\n\n/**\n * Resource and activity toolbox class.\n *\n * This is a class extending TOOLBOX containing code specific to resources\n *\n * This class is responsible for managing AJAX interactions with activities and resources\n * when viewing a quiz in editing mode.\n */\nclass ResourceToolBox extends ToolBox {\n    courseId = 0;\n    quizId = 0;\n    config = {};\n\n    /**\n     * An Array of events added when editing a max mark field.\n     * These should all be detached when editing is complete.\n     */\n    editMaxMarkEvents = false;\n\n    constructor(courseId, quizId, addEvent) {\n        const config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n        super(config, courseId, quizId);\n        this.courseId = courseId;\n        this.quizId = quizId;\n        this.config = config;\n        if (addEvent) {\n            BODY.addEventListener('click', (event) => {\n                // Use event.target.closest to ensure event delegation works\n                if (event.target.closest(SELECTOR.ACTIVITYACTION) ||\n                    event.target.closest(SELECTOR.DEPENDENCY_LINK)) {\n                    this.handleDataAction(event);\n                }\n            });\n\n            this.initialiseSelectMultiple();\n        }\n    }\n\n    /**\n     * Initialize the select multiple options\n     * Add actions to the buttons that enable multiple slots to be selected and managed at once.\n     *\n     * @protected\n     */\n    initialiseSelectMultiple() {\n        const body = document.body;\n\n        // Click select multiple button to show the select all options.\n        document.querySelector(SELECTOR.SELECTMULTIPLEBUTTON).addEventListener('click', function(e) {\n            e.preventDefault();\n            body.classList.add(CSS.SELECTMULTIPLE);\n        });\n\n        // Click cancel button to hide the select all options.\n        document.querySelector(SELECTOR.SELECTMULTIPLECANCELBUTTON).addEventListener('click', function(e) {\n            e.preventDefault();\n            body.classList.remove(CSS.SELECTMULTIPLE);\n        });\n\n        // Assign the delete method to the delete multiple button.\n        body.addEventListener('click', function(e) {\n            if (e.target.closest(SELECTOR.SELECTMULTIPLEDELETEBUTTON)) {\n                this.deleteMultipleAction(e);\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Handles the delegation event. When this is fired someone has triggered an action.\n     *\n     * Note not all actions will result in an AJAX enhancement.\n     *\n     * @param {Event} ev The event that was triggered.\n     * @returns {boolean}\n     */\n    handleDataAction(ev) {\n        // We need to get the anchor element that triggered this event.\n        let node = ev.target;\n        if (!(this.isATag(node))) {\n            node = node.closest(SELECTOR.ACTIVITYACTION);\n        }\n\n        // From the anchor we can get both the activity (added during initialisation) and the action being\n        // performed (added by the UI as a data attribute).\n        const action = node.dataset.action,\n            activity = node.closest(SELECTOR.ACTIVITYLI);\n\n        if (!(this.isATag(node)) || !action || !activity) {\n            // It wasn't a valid action node.\n            return;\n        }\n\n        // Switch based upon the action and do the desired thing.\n        switch (action) {\n            case 'editmaxmark':\n                // The user wishes to edit the max mark of the resource.\n                this.editMaxMark(ev, node, activity);\n                break;\n            case 'delete':\n                // The user is deleting the activity.\n                this.deleteWithConfirmation(ev, node, activity, action);\n                break;\n            case 'addpagebreak':\n            case 'removepagebreak':\n                // The user is adding or removing a page break.\n                this.updatePageBreak(ev, node, activity, action);\n                break;\n            case 'adddependency':\n            case 'removedependency':\n                // The user is adding or removing a dependency between questions.\n                this.updateDependency(ev, node, activity, action);\n                break;\n            default:\n                // Nothing to do here!\n                break;\n        }\n    }\n\n    isATag(node) {\n        return node.tagName.toLowerCase() === 'a';\n    }\n\n    /**\n     * Edit the max mark for the resource.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {HTMLElement} button The button that triggered this action.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @return Boolean\n     */\n    editMaxMark(ev, button, activity) {\n        // Prevent the default actions.\n        ev.preventDefault();\n        // Get the element we're working on.\n        const instanceMaxmark = activity.querySelector(SELECTOR.INSTANCEMAXMARK);\n        if (!instanceMaxmark) {\n            return;\n        }\n        const instance = activity.querySelector(SELECTOR.ACTIVITYINSTANCE),\n            anchor = instanceMaxmark, // Grab the anchor so that we can swap it with the edit form.\n            oldMaxMark = instanceMaxmark.firstChild.nodeValue,\n            data = {\n                'id': slot.getId(activity),\n                'quizid': this.quizId,\n            };\n        let maxMarkText = oldMaxMark;\n\n        this.sendRequest(data, null, 'mod_quiz_get_max_mark')\n            .then(response => {\n                if (M.core.actionmenu && M.core.actionmenu.instance) {\n                    M.core.actionmenu.instance.hideMenu(ev);\n                }\n                // Try to retrieve the existing string from the server.\n                if (response.instancemaxmark) {\n                    maxMarkText = response.instancemaxmark;\n                }\n\n                // Create the editor and submit button.\n                const editForm = util.createElement(\"form\", {action: '#'});\n\n                const editInstructions = util.createElement('span', {\n                    id: 'id_editinstructions',\n                    \"class\": CSS.EDITINSTRUCTIONS,\n                });\n\n                getString('edittitleinstructions', 'moodle').then(string => {\n                    editInstructions.innerHTML = string;\n                });\n\n                const editor = util.createElement('input', {\n                    type: 'text',\n                    name: 'maxmark',\n                    \"class\": CSS.TITLEEDITOR,\n                    value: maxMarkText,\n                    autocomplete: 'off',\n                    ['aria-describedby']: 'id_editinstructions',\n                    maxLength: 12,\n                    size: parseInt(this.config.questiondecimalpoints, 10) + 2,\n                });\n\n\n                // Clear the existing content and put the editor in.\n                editForm.appendChild(editor);\n                editForm.dataset.anchor = anchor.outerHTML;\n                instance.parentNode.insertBefore(editInstructions, instance);\n                // Replace anchor span with the editForm input to edit.\n                activity.querySelector(SELECTOR.MAXMARKCONTAINER).replaceChild(editForm, anchor);\n\n                // We hide various components whilst editing:\n                activity.classList.add(CSS.EDITINGMAXMARK);\n\n                // Focus and select the editor text.\n                editor.focus();\n                editor.select();\n\n                // Cancel the edit if we lose focus or the escape key is pressed.\n                editor.addEventListener('blur', event => this.handleMaxMarkEditorBlur\n                    .call(this, event, activity, false));\n                editor.addEventListener('keydown', event => this.handleMaxMarkEditorType\n                    .call(this, event, activity, true));\n                // Handle form submission.\n                editForm.addEventListener('submit', event => this.handleMaxMarkFormSubmit\n                    .call(this, event, activity, oldMaxMark));\n\n                // Store the event listeners for later removal\n                this.editMaxMarkEvents = true;\n            });\n    }\n\n    /**\n     * Takes care of what needs to happen when the user clicks on the delete multiple button.\n     *\n     * @param {Event} ev The event that was fired.\n     */\n    deleteMultipleAction(ev) {\n        const problemSection = this.findSectionsThatWouldBecomeEmpty();\n\n        if (typeof problemSection !== 'undefined') {\n            getStrings([\n                {key: 'cannotremoveslots', component: 'quiz'},\n                {key: 'cannotremoveallsectionslots', component: 'quiz', param: problemSection},\n            ]).then(([string1, string2]) => {\n                Notification.alert(\n                    string1,\n                    string2,\n                );\n                return true;\n            }).catch(Notification.exception);\n        } else {\n            this.deleteMultipleWithConfirmation(ev);\n        }\n    }\n\n    /**\n     * Finds the section that would become empty if we remove the selected slots.\n     *\n     * @returns {String} The name of the first section found\n     */\n    findSectionsThatWouldBecomeEmpty() {\n        let section;\n        const sectionNodes = [...document.querySelectorAll(SELECTOR.SECTIONLI)];\n\n        if (sectionNodes.length > 1) {\n            sectionNodes.some((node) => {\n                const sectionName = node.querySelector(SELECTOR.INSTANCESECTION).textContent;\n                const checked = node.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`);\n                const unchecked = node.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:not(:checked)`);\n                if (checked.length > 0 && unchecked.length === 0) {\n                    section = sectionName;\n                }\n\n                return section;\n            });\n        }\n\n        return section;\n    }\n\n    /**\n     * Deletes the given activities or resources after confirmation.\n     *\n     * @param {Event} ev The event that was fired.\n     */\n    async deleteMultipleWithConfirmation(ev) {\n        ev.preventDefault();\n\n        let ids = '';\n        const slots = [];\n        document.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`).forEach((node) => {\n            const slotData = slot.getSlotFromComponent(node);\n            ids += ids === '' ? '' : ',';\n            ids += slot.getId(slotData);\n            slots.push(slotData);\n        });\n        const element = document.querySelector('div.mod-quiz-edit-content');\n\n        // Do nothing if no slots are selected.\n        if (!slots.length) {\n            return;\n        }\n\n        const [title, question, saveLabel] = await getStrings([\n            {key: 'confirm', component: 'moodle'},\n            {key: 'areyousureremoveselected', component: 'quiz'},\n            {key: 'yes', component: 'moodle'},\n        ]);\n\n        Notification.saveCancelPromise(\n            title,\n            question,\n            saveLabel,\n        ).then(() => {\n            const data = {\n                ids: ids,\n                quizid: this.quizId,\n            };\n            // Delete items on server.\n            this.sendRequest(data, element, 'mod_quiz_delete_multiple').then(response => {\n                // Delete locally if deleted on server.\n                if (response.deleted) {\n                    // Actually remove the element.\n                    document.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`).forEach((node) => {\n                        slot.remove(node.closest('li.activity'));\n                    });\n                    // Update the page numbers and sections.\n                    this.reorganiseEditPage();\n\n                    // Remove the select multiple options.\n                    document.body.classList.remove(CSS.SELECTMULTIPLE);\n                }\n            });\n        }).catch(() => {\n            // User cancelled.\n        });\n    }\n\n    /**\n     * Event to handle max mark when blur.\n     *\n     * @param {Event} event the blur event of current node.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @param {Boolean} preventDefault\n     */\n    handleMaxMarkEditorBlur(event, activity, preventDefault) {\n        return this.editMaxMarkCancel(event, activity, preventDefault);\n    }\n\n    /**\n     * Event to handle max mark when escape.\n     *\n     * @param {Event} event the key down event of current node.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @param {Boolean} preventDefault\n     */\n    handleMaxMarkEditorType(event, activity, preventDefault) {\n        if (event.key === 'Escape' || event.keyCode === 27) {\n            this.editMaxMarkCancel(event, activity, preventDefault);\n        }\n    }\n\n    /**\n     * Event to handle max mark when submit.\n     *\n     * @param {Event} event the submit event of current node.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @param {String} oldMaxMark the old value of max mark.\n     */\n    handleMaxMarkFormSubmit(event, activity, oldMaxMark) {\n        event.preventDefault(); // Prevent the default form submission behavior\n        return this.editMaxMarkSubmit(event, activity, oldMaxMark);\n    }\n\n    /**\n     * Deletes the given activity or resource after confirmation.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {HTMLElement} button The button that triggered this action.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     */\n    async deleteWithConfirmation(ev, button, activity) {\n        // Prevent the default button action.\n        ev.preventDefault();\n\n        // Get the element we're working on.\n        const element = activity;\n        const qtypeClass = element.getAttribute('class').match(/qtype_(\\S*)/)[1];\n\n        // Create confirm string (different if element has or does not have name)\n        const qtypeName = await getString('pluginname', 'qtype_' + qtypeClass);\n        const allStrings = [\n            {key: 'confirm', component: 'moodle'},\n            {key: 'confirmremovequestion', component: 'quiz', param: qtypeName},\n            {key: 'yes', component: 'moodle'},\n        ];\n        const [title, question, saveLabel] = await getStrings(allStrings);\n\n        try {\n            await Notification.saveCancelPromise(\n                title,\n                question,\n                saveLabel,\n            );\n            const data = {\n                'quizid': this.quizId,\n                'id': slot.getId(element) // Adjusting the YUI namespace\n            };\n            this.sendRequest(data, element, 'mod_quiz_delete_resource').then(response => {\n                if (response.deleted) {\n                    // Actually remove the element.\n                    slot.remove(element);\n                    this.reorganiseEditPage();\n                    if (M.core.actionmenu && M.core.actionmenu.instance) {\n                        M.core.actionmenu.instance.hideMenu(ev);\n                    }\n                }\n            });\n        } catch (e) {\n            // User cancelled.\n        }\n    }\n\n    /**\n     * Reorganise the UI after every edit action.\n     */\n    reorganiseEditPage() {\n        slot.reorderSlots();\n        slot.reorderPageBreaks();\n        page.reorderPages();\n        slot.updateOneSlotSections();\n        slot.updateAllDependencyIcons();\n    }\n\n    /**\n     * Joins or separates the given slot with the page of the previous slot. Reorders the pages of\n     * the other slots.\n     *\n     * @protected\n     * @param {Event} ev - The event that was fired.\n     * @param {HTMLElement} button - The button that triggered this action.\n     * @param {HTMLElement} activity - The activity node that this action will be performed on.\n     * @param {string} action - The action, addpagebreak or removepagebreak.\n     */\n    updatePageBreak(ev, button, activity, action) {\n        // Prevent the default button action\n        ev.preventDefault();\n\n        let nextActivity = activity.nextElementSibling;\n\n        while (nextActivity && !nextActivity.matches(SELECTOR.SLOTLI)) {\n            nextActivity = nextActivity.nextElementSibling;\n        }\n\n        if (!nextActivity) {\n            return;\n        }\n\n        const value = action === 'removepagebreak' ? 1 : 2;\n\n        const data = {\n            'id': slot.getId(nextActivity),\n            'value': value,\n            'quizid': this.quizId,\n        };\n\n        this.sendRequest(data, nextActivity, 'mod_quiz_update_page_break').then(response => {\n            if (response.slots) {\n                if (action === 'addpagebreak') {\n                    page.add(activity);\n                } else {\n                    const pageEl = activity.nextElementSibling\n                        && activity.nextElementSibling.matches(page.SELECTORS.PAGE) ? activity.nextElementSibling : null;\n                    if (pageEl) {\n                        page.remove(pageEl, true);\n                    }\n                }\n                this.reorganizeEditPage();\n            }\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Updates a slot to either require the question in the previous slot to\n     * have been answered, or not.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {Node} button The button that triggered this action.\n     * @param {Node} activity The activity node that this action will be performed on.\n     * @param {String} action The action, adddependency or removedependency.\n     */\n    updateDependency(ev, button, activity, action) {\n        // Prevent the default button action.\n        ev.preventDefault();\n\n        const data = {\n            id: slot.getId(activity),\n            value: action === 'adddependency' ? 1 : 0,\n            quizid: this.quizId,\n        };\n\n        this.sendRequest(data, activity, 'mod_quiz_update_dependency').then(response => {\n            if (response.hasOwnProperty('requireprevious')) {\n                slot.updateDependencyIcon(activity, response.requireprevious);\n            }\n        });\n    }\n\n\n    /**\n     * Reorganise the UI after every edit action.\n     */\n    reorganizeEditPage() {\n        slot.reorderSlots();\n        slot.reorderPageBreaks();\n        page.reorderPages();\n        slot.updateOneSlotSections();\n        slot.updateAllDependencyIcons();\n    }\n\n    /**\n     * Handles the cancel event when editing the activity or resources maxmark.\n     *\n     * @param {Event} ev The event that triggered this.\n     * @param {Node} activity The activity whose maxmark we are altering.\n     * @param {Boolean} preventDefault If true we should prevent the default action from occuring.\n     */\n    editMaxMarkCancel(ev, activity, preventDefault) {\n        if (preventDefault) {\n            ev.preventDefault();\n        }\n\n        this.editMaxMarkClear(activity);\n    }\n\n    /**\n     * Handles clearing the editing UI and returning things to the original state they were in.\n     *\n     * @param {HTMLElement} activity  The activity whose maxmark we were altering.\n     */\n    editMaxMarkClear(activity) {\n        // Detach all listen events to prevent duplicate triggers\n        if (!this.editMaxMarkEvents) {\n            return;\n        }\n\n        this.editMaxMarkEvents = false;\n\n        const editForm = activity.querySelector(SELECTOR.ACTIVITYFORM),\n            instructions = activity.querySelector('#id_editinstructions');\n        if (editForm) {\n            editForm.parentNode.insertAdjacentHTML('afterbegin', editForm.dataset.anchor);\n            editForm.remove();\n        }\n        if (instructions) {\n            instructions.parentNode.removeChild(instructions);\n        }\n\n        // Remove the editing class again to revert the display.\n        activity.classList.remove(CSS.EDITINGMAXMARK);\n\n        // Refocus the link which was clicked originally so the user can continue using keyboard nav.\n        setTimeout(function() {\n            activity.querySelector(SELECTOR.EDITMAXMARK).focus();\n        }, 100);\n\n        // TODO MDL-50768 This hack is to keep Behat happy until they release a version of\n        // MinkSelenium2Driver that fixes\n        // https://github.com/Behat/MinkSelenium2Driver/issues/80.\n        if (!document.querySelector('input[name=maxmark]')) {\n            const input = util.createElement('input', {\n                type: 'text',\n                name: 'maxmark',\n                \"class\": 'd-none',\n            });\n            document.querySelector('body').appendChild(input);\n        }\n    }\n\n    /**\n     * Handles the submit event when editing the activity or resources maxmark.\n     *\n     * @param {Event} ev The event that triggered this.\n     * @param {HTMLElement} activity The activity whose max mark we are altering.\n     * @param {String} originalMaxMark The original max mark the activity or resource had.\n     */\n    editMaxMarkSubmit(ev, activity, originalMaxMark) {\n        // We don't actually want to submit anything.\n        ev.preventDefault();\n        const editor = activity.querySelector(SELECTOR.ACTIVITYFORM + ' ' + SELECTOR.ACTIVITYMAXMARK);\n        // The value should cointain only number.\n        const newMaxMark = /^\\d+$/.test(editor.value.trim()) ? editor.value.trim() : 0;\n        // Try to blur input to trigger event editMaxMarkClear.\n        editor.blur();\n        // Update the instance max mark content\n        activity.querySelector(SELECTOR.INSTANCEMAXMARK).textContent = newMaxMark;\n\n        if (newMaxMark !== null && newMaxMark !== \"\" && newMaxMark !== originalMaxMark) {\n            const data = {\n                'maxmark': newMaxMark,\n                'id': slot.getId(activity), // Adjusting the namespace.\n                'quizid': this.quizId,\n            };\n            this.sendRequest(data, activity, 'mod_quiz_update_max_mark').then(response => {\n                if (response.instancemaxmark) {\n                    activity.querySelector(SELECTOR.INSTANCEMAXMARK).textContent = response.instancemaxmark;\n                }\n            }).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Add a loading icon to the specified activity.\n     * The icon is added within the action area.\n     *\n     * @param {HTMLElement} activity The activity to add a loading icon to\n     * @return {HTMLElement|null} The newly created icon, or null if the action area was not found.\n     */\n    addSpinner(activity) {\n        const actionArea = activity.querySelector(SELECTOR.ACTIONAREA);\n        if (actionArea) {\n            return util.addSpinner(actionArea);\n            // return addIconToContainerWithPromise(actionArea);\n        }\n\n        return null;\n    }\n}\n\n/**\n * Section toolbox class.\n *\n * This class is responsible for managing AJAX interactions with sections\n * when adding, editing, removing section headings.\n */\nclass SectionToolBox extends ToolBox {\n    /**\n     * An Array of events added when editing a max mark field.\n     * These should all be detached when editing is complete.\n     */\n    editSectionEvents = false;\n\n    /**\n     * Initialize the section toolboxes module.\n     * Updates all span. Commands with relevant handlers and other required changes.\n     *\n     * @param {Number} courseId The ID of the Moodle Course being edited.\n     * @param {Number} quizId The ID of the quiz being edited.\n     */\n    constructor(courseId, quizId) {\n        const config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n        super(config, courseId, quizId);\n        this.courseId = courseId;\n        this.quizId = quizId;\n        this.config = config;\n\n        BODY.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && event.target.closest(SELECTOR.ACTIVITYACTION)) {\n                this.handleDataAction(event);\n            }\n        });\n\n        BODY.addEventListener('click', (event) => {\n            if (event.target.closest(SELECTOR.ACTIVITYACTION)) {\n                this.handleDataAction(event);\n            }\n        });\n\n        BODY.addEventListener('change', (event) => {\n            if (event.target.closest(SELECTOR.EDITSHUFFLEQUESTIONSACTION)) {\n                this.handleDataAction(event);\n            }\n        });\n    }\n\n    /**\n     * Handles the delegation event. When this is fired someone has triggered an action.\n     *\n     * Note not all actions will result in an AJAX enhancement.\n     *\n     * @param {Event} ev The event that was triggered.\n     * @returns {boolean}\n     */\n    handleDataAction(ev) {\n        // We need to get the anchor element that triggered this event.\n        let node = ev.target;\n        if (!node.matches('a') && !node.matches('input[data-action]')) {\n            node = node.closest(SELECTOR.ACTIVITYACTION);\n        }\n\n        // From the anchor we can get both the activity (added during initialization) and the action being\n        // performed (added by the UI as a data attribute).\n        const action = node ? node.getAttribute('data-action') : null;\n        const activity = node ? node.closest(SELECTOR.ACTIVITYLI) : null;\n\n        if ((!node.matches('a') && !node.matches('input[data-action]')) || !action || !activity) {\n            // It wasn't a valid action node.\n            return false;\n        }\n\n        // Switch based upon the action and do the desired thing.\n        switch (action) {\n            case 'edit_section_title':\n                // The user wishes to edit the section headings.\n                this.editSectionTitle(ev, node, activity);\n                break;\n            case 'shuffle_questions':\n                // The user wishes to edit the shuffle questions of the section (resource).\n                this.editShuffleQuestions(ev, node, activity);\n                break;\n            case 'deletesection':\n                // The user is deleting the activity.\n                this.deleteSectionWithConfirmation(ev, node, activity);\n                break;\n            default:\n                // Nothing to do here!\n                break;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes the given section heading after confirmation.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {HTMLElement} button The button that triggered this action.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @chainable\n     */\n    async deleteSectionWithConfirmation(ev, button, activity) {\n        ev.preventDefault();\n        const [title, question, saveLabel] = await getStrings([\n            {key: 'confirm', component: 'moodle'},\n            {key: 'confirmremovesectionheading', component: 'quiz', param: activity.dataset.sectionname},\n            {key: 'yes', component: 'moodle'},\n        ]);\n        Notification.saveCancelPromise(\n            title,\n            question,\n            saveLabel\n        ).then(() => {\n            const data = {\n                'id': activity.id.replace('section-', ''),\n                'quizid': this.quizId,\n            };\n            this.sendRequest(data, activity.querySelector(SELECTOR.ACTIONAREA), 'mod_quiz_delete_section').then((response) => {\n                if (response.deleted) {\n                    window.location.reload(true);\n                }\n            });\n        }).catch(() => {\n            // User cancelled.\n        });\n    }\n\n    /**\n     * Edit the edit section title for the section.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {HTMLElement} button The button that triggered this action.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @return {Boolean}\n     */\n    editSectionTitle(ev, button, activity) {\n        // Get the element we're working on\n        const activityId = activity.id.replace('section-', '');\n        const instanceSection = activity.querySelector(SELECTOR.INSTANCESECTION);\n        let anchor = instanceSection; // Grab the anchor so that we can swap it with the edit form.\n        const data = {\n            'id': activityId,\n            'quizid': this.quizId,\n        };\n\n        // Prevent the default actions.\n        ev.preventDefault();\n\n        this.sendRequest(data, null, 'mod_quiz_get_section_title').then(response => {\n            // Try to retrieve the existing string from the server.\n            const oldText = response.instancesection;\n\n            // Create the editor and submit button.\n            const editForm = util.createElement('form', {action: '#'});\n            const editInstructions = util.createElement('span', {\"class\": CSS.EDITINSTRUCTIONS,\n                id: 'id_editinstructions'});\n            getString('edittitleinstructions', 'moodle').then(string => {\n                editInstructions.innerHTML = string;\n            });\n            const editor = util.createElement('input', {name: 'section', type: 'text', value: oldText,\n                autocomplete: 'off', 'aria-describedby': 'id_editinstructions', maxLength: 255});\n\n            // Clear the existing content and put the editor in.\n            editForm.appendChild(editor);\n            editForm.dataset.anchor = anchor.outerHTML;\n            instanceSection.parentNode.insertBefore(editInstructions, instanceSection);\n            activity.querySelector(SELECTOR.SECTIONINSTANCE).replaceChild(editForm, anchor);\n\n            // Focus and select the editor text.\n            editor.focus();\n            editor.select();\n            // Cancel the edit if we lose focus or the escape key is pressed.\n            editor.addEventListener('blur', event => this.editSectionTitleCancel(event, activity, false));\n            editor.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    this.editSectionTitleCancel(event, activity, true);\n                }\n            });\n            // Handle form submission.\n            editForm.addEventListener('submit', (event) => this.editSectionTitleSubmit(event, activity, oldText));\n            this.editSectionEvents = true;\n        });\n    }\n\n    /**\n     * Handles the submit event when editing section heading.\n     *\n     * @param {Event} ev The event that triggered this.\n     * @param {HTMLElement} activity The activity whose section heading we are editing.\n     * @param {String} oldText The original section heading.\n     */\n    async editSectionTitleSubmit(ev, activity, oldText) {\n        // We don't actually want to submit anything.\n        ev.preventDefault();\n        const newTextInput = activity.querySelector(`${SELECTOR.SECTIONFORM} ${SELECTOR.SECTIONINPUT}`);\n        let newText = newTextInput.value.trim();\n        this.editSectionTitleClear(activity);\n\n        if (newText === null || newText === oldText) {\n            return;\n        }\n\n        const instanceSection = activity.querySelector(SELECTOR.INSTANCESECTION);\n        let instanceSectionText = newText;\n        if (newText.trim() === '') {\n            // Add a sr-only default section heading text to ensure we don't end up with an empty section heading.\n            instanceSectionText = await getString('sectionnoname', 'quiz');\n            instanceSection.classList.add('sr-only');\n        } else {\n            // Show the section heading when a non-empty value is set.\n            instanceSection.classList.remove('sr-only');\n        }\n        instanceSection.textContent = instanceSectionText;\n\n        const data = {\n            'newheading': newText,\n            'id': activity.id.replace('section-', ''),\n            'quizid': this.quizId,\n        };\n\n        try {\n            const response = await this.sendRequest(data, activity.querySelector(SELECTOR.INSTANCESECTIONAREA),\n                'mod_quiz_update_section_title');\n            if (response) {\n                // Set the content of the section heading if for some reason the response is different from the new text.\n                // e.g. filters were applied, the update failed, etc.\n                if (newText !== response.instancesection) {\n                    if (response.instancesection.trim() === '') {\n                        // Add a sr-only default section heading text.\n                        instanceSectionText = await getString('sectionnoname', 'quiz');\n                        instanceSection.classList.add('sr-only');\n                    } else {\n                        instanceSectionText = response.instancesection;\n                        // Show the section heading when a non-empty value is set.\n                        instanceSection.classList.remove('sr-only');\n                    }\n                    instanceSection.textContent = instanceSectionText;\n                }\n\n                const editSectionIcon = activity.querySelector(SELECTOR.EDITSECTIONICON);\n                editSectionIcon.title = await getString('sectionheadingedit', 'quiz', response.instancesection);\n                editSectionIcon.alt = await getString('sectionheadingedit', 'quiz', response.instancesection);\n\n                const deleteIcon = activity.querySelector(SELECTOR.DELETESECTIONICON);\n                if (deleteIcon) {\n                    deleteIcon.title = await getString('sectionheadingremove', 'quiz', response.instancesection);\n                    deleteIcon.alt = await getString('sectionheadingremove', 'quiz', response.instancesection);\n                }\n            }\n        } catch (error) {\n            // ignore.\n        }\n    }\n\n    /**\n     * Handles the cancel event when editing the section heading.\n     *\n     * @param {Event} ev The event that triggered this.\n     * @param {HTMLElement} activity The activity whose section heading we are editing.\n     * @param {Boolean} preventDefault If true we should prevent the default action from occuring.\n     */\n    editSectionTitleCancel(ev, activity, preventDefault) {\n        if (preventDefault) {\n            ev.preventDefault();\n        }\n        this.editSectionTitleClear(activity);\n    }\n\n    /**\n     * Handles clearing the editing UI and returning things to the original state.\n     *\n     * @param {HTMLElement} activity The activity whose section heading we were editing.\n     */\n    editSectionTitleClear(activity) {\n        // Detach all listen events to prevent duplicate triggers\n        if (!this.editSectionEvents) {\n            return;\n        }\n        this.editSectionEvents = false;\n\n        const editForm = activity.querySelector(SELECTOR.SECTIONFORM);\n        const instructions = activity.querySelector('#id_editinstructions');\n\n        if (editForm) {\n            editForm.parentNode.insertAdjacentHTML('afterbegin', editForm.dataset.anchor);\n            editForm.remove();\n        }\n        if (instructions) {\n            instructions.remove();\n        }\n\n        // Refocus the link which was clicked originally so the user can continue using keyboard nav.\n        setTimeout(() => activity.querySelector(SELECTOR.EDITSECTION).focus(), 100);\n\n        // This hack is to keep Behat happy until they release a version of MinkSelenium2Driver that fixes\n        // https://github.com/Behat/MinkSelenium2Driver/issues/80.\n        if (!document.querySelector('input[name=section]')) {\n            const input = util.createElement('input', {\n                type: 'text',\n                name: 'section',\n                \"class\": 'd-none',\n            });\n            document.querySelector('body').appendChild(input);\n        }\n    }\n\n    /**\n     * Edit the shuffle questions for the section.\n     *\n     * @param {Event} ev The event that was fired.\n     * @param {HTMLElement} button The button that triggered this action.\n     * @param {HTMLElement} activity The activity node that this action will be performed on.\n     * @return {Boolean}\n     */\n    editShuffleQuestions(ev, button, activity) {\n        let newValue;\n        if (activity.querySelector(SELECTOR.EDITSHUFFLEQUESTIONSACTION).checked) {\n            newValue = 1;\n            activity.classList.add('shuffled');\n        } else {\n            newValue = 0;\n            activity.classList.remove('shuffled');\n        }\n\n        // Prevent default behavior\n        ev.preventDefault();\n\n        // Prepare data object\n        const data = {\n            id: activity.id.replace('section-', ''),\n            newshuffle: newValue,\n            quizid: this.quizId,\n        };\n\n        // Send request (replace with your fetch implementation)\n        this.sendRequest(data, activity.querySelector(SELECTOR.EDITSHUFFLEAREA), 'mod_quiz_update_shuffle_questions');\n    }\n}\n\n/**\n * Init resource toolbox method.\n *\n * @param {Number} courseId The ID of the Moodle Course being edited.\n * @param {Number} quizId The ID of the quiz being edited.\n * @param {Boolean} addEvent The flag to add event. True is add event.\n */\nfunction initResourceToolbox(courseId, quizId, addEvent = true) {\n    return new ResourceToolBox(courseId, quizId, addEvent);\n}\n\n/**\n * Init section toolbox method.\n *\n * @param {Number} courseId The ID of the Moodle Course being edited.\n * @param {Number} quizId The ID of the quiz being edited.\n */\nfunction initSectionToolbox(courseId, quizId) {\n    new SectionToolBox(courseId, quizId);\n}\nconst config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n\nexport {\n    initResourceToolbox,\n    initSectionToolbox,\n    config,\n};"],"names":["courseId","quizId","addEvent","ResourceToolBox","SectionToolBox","CSS","SELECTOR","ACTIONAREA","ACTIONLINKTEXT","ACTIVITYACTION","ACTIVITYFORM","ACTIVITYINSTANCE","SECTIONINSTANCE","ACTIVITYLI","ACTIVITYMAXMARK","COMMANDSPAN","CONFIGTOOLBOX","CONTENTAFTERLINK","CONTENTWITHOUTLINK","DELETESECTIONICON","EDITMAXMARK","EDITSECTION","EDITSECTIONICON","EDITSHUFFLEQUESTIONSACTION","EDITSHUFFLEAREA","HIDE","HIGHLIGHT","INSTANCENAME","INSTANCEMAXMARK","INSTANCESECTION","INSTANCESECTIONAREA","MAXMARKCONTAINER","MODINDENTDIV","MODINDENTOUTER","NUMQUESTIONS","PAGECONTENT","PAGELI","SECTIONLI","SECTIONUL","SECTIONFORM","SECTIONINPUT","SELECTMULTIPLEBUTTON","SELECTMULTIPLECANCELBUTTON","SELECTMULTIPLECHECKBOX","SELECTMULTIPLEDELETEBUTTON","SELECTALL","SHOW","SLOTLI","SUMMARKS","BODY","document","body","prefetchStrings","ToolBox","constructor","config","sendRequest","data","loadingElement","methodName","optionalConfig","parameters","methodname","args","varName","spinner","then","response","resolve","newnumquestions","string","querySelector","innerHTML","newsummarks","JSON","parse","dataset","addEventListener","event","target","closest","DEPENDENCY_LINK","handleDataAction","initialiseSelectMultiple","e","preventDefault","classList","add","remove","deleteMultipleAction","bind","this","ev","node","isATag","action","activity","editMaxMark","deleteWithConfirmation","updatePageBreak","updateDependency","tagName","toLowerCase","button","instanceMaxmark","instance","anchor","oldMaxMark","firstChild","nodeValue","slot","getId","maxMarkText","M","core","actionmenu","hideMenu","instancemaxmark","editForm","util","createElement","editInstructions","id","editor","type","name","value","autocomplete","maxLength","size","parseInt","questiondecimalpoints","appendChild","outerHTML","parentNode","insertBefore","replaceChild","focus","select","handleMaxMarkEditorBlur","call","handleMaxMarkEditorType","handleMaxMarkFormSubmit","editMaxMarkEvents","problemSection","findSectionsThatWouldBecomeEmpty","key","component","param","_ref","string1","string2","alert","catch","Notification","exception","deleteMultipleWithConfirmation","section","sectionNodes","querySelectorAll","length","some","sectionName","textContent","checked","unchecked","ids","slots","forEach","slotData","getSlotFromComponent","push","element","title","question","saveLabel","saveCancelPromise","quizid","deleted","reorganiseEditPage","editMaxMarkCancel","keyCode","editMaxMarkSubmit","qtypeClass","getAttribute","match","allStrings","reorderSlots","reorderPageBreaks","reorderPages","updateOneSlotSections","updateAllDependencyIcons","nextActivity","nextElementSibling","matches","pageEl","page","SELECTORS","PAGE","reorganizeEditPage","hasOwnProperty","updateDependencyIcon","requireprevious","editMaxMarkClear","instructions","insertAdjacentHTML","removeChild","setTimeout","input","originalMaxMark","newMaxMark","test","trim","blur","addSpinner","actionArea","editSectionTitle","editShuffleQuestions","deleteSectionWithConfirmation","sectionname","replace","window","location","reload","activityId","instanceSection","oldText","instancesection","editSectionTitleCancel","editSectionTitleSubmit","editSectionEvents","newText","editSectionTitleClear","instanceSectionText","editSectionIcon","alt","deleteIcon","error","newValue","newshuffle"],"mappings":"4kBAmmC6BA,SAAUC,YAAQC,2EACpC,IAAIC,gBAAgBH,SAAUC,OAAQC,gDASrBF,SAAUC,YAC9BG,eAAeJ,SAAUC,+GA/kC3BI,qBAOoB,mBAPpBA,mBAQkB,mBARlBA,mBAgBkB,kBAhBlBA,gBAmBe,cAGjBC,SAAW,CACPC,WAAY,WACZC,eAAgB,kBAChBC,eAAgB,+FAChBC,aAAc,qCACdC,iBAAkB,IA1BA,mBA2BlBC,gBAAiB,mBACjBC,WAAY,0BACZC,gBAAiB,sBACjBC,YAAa,YACbC,cAAe,kBACfC,iBAAkB,uBAClBC,mBAAoB,yBACpBC,kBAAmB,yBACnBC,YAAa,oBACbC,YAAa,oBACbC,gBAAiB,0BACjBC,2BAA4B,oCAC5BC,gBAAiB,8CACjBC,KAAM,iBACNC,UAAW,sBACXC,aAAc,oBACdC,gBAAiB,uBACjBC,gBAAiB,uBACjBC,oBAAqB,sBACrBC,iBAAkB,4BAClBC,aAAc,cACdC,eAAgB,oBAChBC,aAAc,qBACdC,YAAa,mBACbC,OAAQ,UACRC,UAAW,aACXC,UAAW,aACXC,YAAa,iCACbC,aAAc,sBACdC,qBAAsB,yBACtBC,2BAA4B,+BAC5BC,uBAAwB,4BACxBC,2BAA4B,+BAC5BC,UAAW,qBACXC,KAAM,KA5CA,eA6CNC,OAAQ,UACRC,SAAU,sBAEdC,KAAOC,SAASC,uBAEXC,gBAAgB,OACrB,CAAC,gBAAiB,oBAAqB,8BAA+B,wBAClE,8BAA+B,gBAAiB,gBAAiB,qBAAsB,qBACvF,uBAAwB,uBAAwB,+CAE/CA,gBAAgB,SAAU,CAAC,wBAAyB,UACzD,MAAO,UAAW,gCAQhBC,QAKFC,YAAYC,OAAQvD,SAAUC,sCAJrB,kCACA,mCACE,QAGFsD,OAASA,YACTvD,SAAWA,cACXC,OAASA,OAWlBuD,YAAYC,KAAMC,eAAgBC,WAAYC,sBACpCC,WAAa,CACfC,WAAYH,WACZI,KAAMN,SAING,mBACK,IAAII,WAAWJ,eAChBL,OAAOS,SAAWJ,eAAeI,aAGrCC,QAAU,YAES,OAAnBP,iBACAO,SAAU,8CAA8BP,kBAGrC,cAAU,CAACG,aAAa,GAAGK,MAAKC,WACnB,OAAZF,SACAA,QAAQG,UAGRD,SAASE,oCACC,gBAAiB,OAAQF,SAASE,iBAAiBH,MAAKI,SAC9DpB,SAASqB,cAAcjE,SAAS4B,cAAcsC,UAAYF,UAG9DH,SAASM,cACTvB,SAASqB,cAAcjE,SAAS0C,UAAUwB,UAAYL,SAASM,aAG5DN,mBAabhE,wBAAwBkD,QAW1BC,YAAYtD,SAAUC,OAAQC,gBACpBqD,OAASmB,KAAKC,MAAMzB,SAASqB,cAAcjE,SAASU,eAAe4D,QAAQrB,cAC3EA,OAAQvD,SAAUC,wCAZjB,iCACF,iCACA,8CAMW,QAKXD,SAAWA,cACXC,OAASA,YACTsD,OAASA,OACVrD,WACA+C,KAAK4B,iBAAiB,SAAUC,SAExBA,MAAMC,OAAOC,QAAQ1E,SAASG,iBAC9BqE,MAAMC,OAAOC,QAAQ1E,SAAS2E,wBACzBC,iBAAiBJ,eAIzBK,4BAUbA,iCACUhC,KAAOD,SAASC,KAGtBD,SAASqB,cAAcjE,SAASmC,sBAAsBoC,iBAAiB,SAAS,SAASO,GACrFA,EAAEC,iBACFlC,KAAKmC,UAAUC,IAAIlF,uBAIvB6C,SAASqB,cAAcjE,SAASoC,4BAA4BmC,iBAAiB,SAAS,SAASO,GAC3FA,EAAEC,iBACFlC,KAAKmC,UAAUE,OAAOnF,uBAI1B8C,KAAK0B,iBAAiB,QAAS,SAASO,GAChCA,EAAEL,OAAOC,QAAQ1E,SAASsC,kCACrB6C,qBAAqBL,IAEhCM,KAAKC,OAWXT,iBAAiBU,QAETC,KAAOD,GAAGb,OACRY,KAAKG,OAAOD,QACdA,KAAOA,KAAKb,QAAQ1E,SAASG,uBAK3BsF,OAASF,KAAKjB,QAAQmB,OACxBC,SAAWH,KAAKb,QAAQ1E,SAASO,eAE/B8E,KAAKG,OAAOD,OAAWE,QAAWC,gBAMhCD,YACC,mBAEIE,YAAYL,GAAIC,KAAMG,oBAE1B,cAEIE,uBAAuBN,GAAIC,KAAMG,SAAUD,kBAE/C,mBACA,uBAEII,gBAAgBP,GAAIC,KAAMG,SAAUD,kBAExC,oBACA,wBAEIK,iBAAiBR,GAAIC,KAAMG,SAAUD,SAQtDD,OAAOD,YACmC,MAA/BA,KAAKQ,QAAQC,cAWxBL,YAAYL,GAAIW,OAAQP,UAEpBJ,GAAGP,uBAEGmB,gBAAkBR,SAASzB,cAAcjE,SAASsB,qBACnD4E,6BAGCC,SAAWT,SAASzB,cAAcjE,SAASK,kBAC7C+F,OAASF,gBACTG,WAAaH,gBAAgBI,WAAWC,UACxCpD,KAAO,IACGqD,iBAAKC,MAAMf,iBACPL,KAAK1F,YAEnB+G,YAAcL,gBAEbnD,YAAYC,KAAM,KAAM,yBACxBS,MAAKC,WACE8C,EAAEC,KAAKC,YAAcF,EAAEC,KAAKC,WAAWV,UACvCQ,EAAEC,KAAKC,WAAWV,SAASW,SAASxB,IAGpCzB,SAASkD,kBACTL,YAAc7C,SAASkD,uBAIrBC,SAAWC,iBAAKC,cAAc,OAAQ,CAACzB,OAAQ,MAE/C0B,iBAAmBF,iBAAKC,cAAc,OAAQ,CAChDE,GAAI,4BACKrH,0CAGH,wBAAyB,UAAU6D,MAAKI,SAC9CmD,iBAAiBjD,UAAYF,gBAG3BqD,OAASJ,iBAAKC,cAAc,QAAS,CACvCI,KAAM,OACNC,KAAM,gBACGxH,gBACTyH,MAAOd,YACPe,aAAc,yBACQ,sBACtBC,UAAW,GACXC,KAAMC,SAASvC,KAAKpC,OAAO4E,sBAAuB,IAAM,IAK5Db,SAASc,YAAYT,QACrBL,SAAS1C,QAAQ8B,OAASA,OAAO2B,UACjC5B,SAAS6B,WAAWC,aAAad,iBAAkBhB,UAEnDT,SAASzB,cAAcjE,SAASyB,kBAAkByG,aAAalB,SAAUZ,QAGzEV,SAASV,UAAUC,IAAIlF,oBAGvBsH,OAAOc,QACPd,OAAOe,SAGPf,OAAO9C,iBAAiB,QAAQC,OAASa,KAAKgD,wBACzCC,KAAKjD,KAAMb,MAAOkB,UAAU,KACjC2B,OAAO9C,iBAAiB,WAAWC,OAASa,KAAKkD,wBAC5CD,KAAKjD,KAAMb,MAAOkB,UAAU,KAEjCsB,SAASzC,iBAAiB,UAAUC,OAASa,KAAKmD,wBAC7CF,KAAKjD,KAAMb,MAAOkB,SAAUW,mBAG5BoC,mBAAoB,KASrCtD,qBAAqBG,UACXoD,eAAiBrD,KAAKsD,wCAEE,IAAnBD,mCACI,CACP,CAACE,IAAK,oBAAqBC,UAAW,QACtC,CAACD,IAAK,8BAA+BC,UAAW,OAAQC,MAAOJ,kBAChE9E,MAAKmF,WAAEC,QAASC,2CACFC,MACTF,QACAC,UAEG,KACRE,MAAMC,sBAAaC,gBAEjBC,+BAA+BhE,IAS5CqD,uCACQY,cACEC,aAAe,IAAI5G,SAAS6G,iBAAiBzJ,SAAS+B,mBAExDyH,aAAaE,OAAS,GACtBF,aAAaG,MAAMpE,aACTqE,YAAcrE,KAAKtB,cAAcjE,SAASuB,iBAAiBsI,YAC3DC,QAAUvE,KAAKkE,2BAAoBzJ,SAASqC,oCAC5C0H,UAAYxE,KAAKkE,2BAAoBzJ,SAASqC,iDAChDyH,QAAQJ,OAAS,GAA0B,IAArBK,UAAUL,SAChCH,QAAUK,aAGPL,WAIRA,6CAQ0BjE,IACjCA,GAAGP,qBAECiF,IAAM,SACJC,MAAQ,GACdrH,SAAS6G,2BAAoBzJ,SAASqC,oCAAkC6H,SAAS3E,aACvE4E,SAAW3D,iBAAK4D,qBAAqB7E,MAC3CyE,KAAe,KAARA,IAAa,GAAK,IACzBA,KAAOxD,iBAAKC,MAAM0D,UAClBF,MAAMI,KAAKF,mBAETG,QAAU1H,SAASqB,cAAc,iCAGlCgG,MAAMP,oBAIJa,MAAOC,SAAUC,iBAAmB,mBAAW,CAClD,CAAC7B,IAAK,UAAWC,UAAW,UAC5B,CAACD,IAAK,2BAA4BC,UAAW,QAC7C,CAACD,IAAK,MAAOC,UAAW,kCAGf6B,kBACTH,MACAC,SACAC,WACF7G,MAAK,WACGT,KAAO,CACT6G,IAAKA,IACLW,OAAQtF,KAAK1F,aAGZuD,YAAYC,KAAMmH,QAAS,4BAA4B1G,MAAKC,WAEzDA,SAAS+G,UAEThI,SAAS6G,2BAAoBzJ,SAASqC,oCAAkC6H,SAAS3E,wBACxEL,OAAOK,KAAKb,QAAQ,wBAGxBmG,qBAGLjI,SAASC,KAAKmC,UAAUE,OAAOnF,2BAGxCoJ,OAAM,SAYbd,wBAAwB7D,MAAOkB,SAAUX,uBAC9BM,KAAKyF,kBAAkBtG,MAAOkB,SAAUX,gBAUnDwD,wBAAwB/D,MAAOkB,SAAUX,gBACnB,WAAdP,MAAMoE,KAAsC,KAAlBpE,MAAMuG,cAC3BD,kBAAkBtG,MAAOkB,SAAUX,gBAWhDyD,wBAAwBhE,MAAOkB,SAAUW,mBACrC7B,MAAMO,iBACCM,KAAK2F,kBAAkBxG,MAAOkB,SAAUW,yCAUtBf,GAAIW,OAAQP,UAErCJ,GAAGP,uBAGGuF,QAAU5E,SACVuF,WAAaX,QAAQY,aAAa,SAASC,MAAM,eAAe,GAIhEC,WAAa,CACf,CAACxC,IAAK,UAAWC,UAAW,UAC5B,CAACD,IAAK,wBAAyBC,UAAW,OAAQC,YAH9B,kBAAU,aAAc,SAAWmC,aAIvD,CAACrC,IAAK,MAAOC,UAAW,YAErB0B,MAAOC,SAAUC,iBAAmB,mBAAWW,sBAG5ChC,sBAAasB,kBACfH,MACAC,SACAC,iBAEEtH,KAAO,QACCkC,KAAK1F,UACT6G,iBAAKC,MAAM6D,eAEhBpH,YAAYC,KAAMmH,QAAS,4BAA4B1G,MAAKC,WACzDA,SAAS+G,2BAEJ1F,OAAOoF,cACPO,qBACDlE,EAAEC,KAAKC,YAAcF,EAAEC,KAAKC,WAAWV,UACvCQ,EAAEC,KAAKC,WAAWV,SAASW,SAASxB,QAIlD,MAAOR,KAQb+F,sCACSQ,gCACAC,qCACAC,gCACAC,yCACAC,2BAaT5F,gBAAgBP,GAAIW,OAAQP,SAAUD,QAElCH,GAAGP,qBAEC2G,aAAehG,SAASiG,wBAErBD,eAAiBA,aAAaE,QAAQ5L,SAASyC,SAClDiJ,aAAeA,aAAaC,uBAG3BD,0BAIClE,MAAmB,oBAAX/B,OAA+B,EAAI,EAE3CtC,KAAO,IACHqD,iBAAKC,MAAMiF,oBACRlE,aACCnC,KAAK1F,aAGduD,YAAYC,KAAMuI,aAAc,8BAA8B9H,MAAKC,cAChEA,SAASoG,MAAO,IACD,iBAAXxE,wBACKR,IAAIS,cACN,OACGmG,OAASnG,SAASiG,oBACjBjG,SAASiG,mBAAmBC,QAAQE,iBAAKC,UAAUC,MAAQtG,SAASiG,mBAAqB,KAC5FE,yBACK3G,OAAO2G,QAAQ,QAGvBI,4BAEF,KACR9C,MAAMC,sBAAaC,WAY1BvD,iBAAiBR,GAAIW,OAAQP,SAAUD,QAEnCH,GAAGP,uBAEG5B,KAAO,CACTiE,GAAIZ,iBAAKC,MAAMf,UACf8B,MAAkB,kBAAX/B,OAA6B,EAAI,EACxCkF,OAAQtF,KAAK1F,aAGZuD,YAAYC,KAAMuC,SAAU,8BAA8B9B,MAAKC,WAC5DA,SAASqI,eAAe,qCACnBC,qBAAqBzG,SAAU7B,SAASuI,oBASzDH,sCACSZ,gCACAC,qCACAC,gCACAC,yCACAC,2BAUTX,kBAAkBxF,GAAII,SAAUX,gBACxBA,gBACAO,GAAGP,sBAGFsH,iBAAiB3G,UAQ1B2G,iBAAiB3G,cAERL,KAAKoD,8BAILA,mBAAoB,QAEnBzB,SAAWtB,SAASzB,cAAcjE,SAASI,cAC7CkM,aAAe5G,SAASzB,cAAc,2BACtC+C,WACAA,SAASgB,WAAWuE,mBAAmB,aAAcvF,SAAS1C,QAAQ8B,QACtEY,SAAS9B,UAEToH,cACAA,aAAatE,WAAWwE,YAAYF,cAIxC5G,SAASV,UAAUE,OAAOnF,oBAG1B0M,YAAW,WACP/G,SAASzB,cAAcjE,SAASc,aAAaqH,UAC9C,MAKEvF,SAASqB,cAAc,uBAAwB,OAC1CyI,MAAQzF,iBAAKC,cAAc,QAAS,CACtCI,KAAM,OACNC,KAAM,gBACG,WAEb3E,SAASqB,cAAc,QAAQ6D,YAAY4E,QAWnD1B,kBAAkB1F,GAAII,SAAUiH,iBAE5BrH,GAAGP,uBACGsC,OAAS3B,SAASzB,cAAcjE,SAASI,aAAe,IAAMJ,SAASQ,iBAEvEoM,WAAa,QAAQC,KAAKxF,OAAOG,MAAMsF,QAAUzF,OAAOG,MAAMsF,OAAS,KAE7EzF,OAAO0F,OAEPrH,SAASzB,cAAcjE,SAASsB,iBAAiBuI,YAAc+C,WAE5C,OAAfA,YAAsC,KAAfA,YAAqBA,aAAeD,gBAAiB,OACtExJ,KAAO,SACEyJ,cACLpG,iBAAKC,MAAMf,iBACPL,KAAK1F,aAEduD,YAAYC,KAAMuC,SAAU,4BAA4B9B,MAAKC,WAC1DA,SAASkD,kBACTrB,SAASzB,cAAcjE,SAASsB,iBAAiBuI,YAAchG,SAASkD,oBAE7EoC,MAAMC,sBAAaC,YAW9B2D,WAAWtH,gBACDuH,WAAavH,SAASzB,cAAcjE,SAASC,mBAC/CgN,WACOhG,iBAAK+F,WAAWC,YAIpB,YAUTnN,uBAAuBiD,QAczBC,YAAYtD,SAAUC,cACZsD,OAASmB,KAAKC,MAAMzB,SAASqB,cAAcjE,SAASU,eAAe4D,QAAQrB,cAC3EA,OAAQvD,SAAUC,kDAXR,QAYXD,SAAWA,cACXC,OAASA,YACTsD,OAASA,OAEdN,KAAK4B,iBAAiB,WAAYC,QACZ,UAAdA,MAAMoE,KAAmBpE,MAAMC,OAAOC,QAAQ1E,SAASG,sBAClDyE,iBAAiBJ,UAI9B7B,KAAK4B,iBAAiB,SAAUC,QACxBA,MAAMC,OAAOC,QAAQ1E,SAASG,sBACzByE,iBAAiBJ,UAI9B7B,KAAK4B,iBAAiB,UAAWC,QACzBA,MAAMC,OAAOC,QAAQ1E,SAASiB,kCACzB2D,iBAAiBJ,UAalCI,iBAAiBU,QAETC,KAAOD,GAAGb,OACTc,KAAKqG,QAAQ,MAASrG,KAAKqG,QAAQ,wBACpCrG,KAAOA,KAAKb,QAAQ1E,SAASG,uBAK3BsF,OAASF,KAAOA,KAAK2F,aAAa,eAAiB,KACnDxF,SAAWH,KAAOA,KAAKb,QAAQ1E,SAASO,YAAc,SAEtDgF,KAAKqG,QAAQ,OAASrG,KAAKqG,QAAQ,wBAA2BnG,SAAWC,gBAEpE,SAIHD,YACC,0BAEIyH,iBAAiB5H,GAAIC,KAAMG,oBAE/B,yBAEIyH,qBAAqB7H,GAAIC,KAAMG,oBAEnC,qBAEI0H,8BAA8B9H,GAAIC,KAAMG,iBAO9C,sCAWyBJ,GAAIW,OAAQP,UAC5CJ,GAAGP,uBACIwF,MAAOC,SAAUC,iBAAmB,mBAAW,CAClD,CAAC7B,IAAK,UAAWC,UAAW,UAC5B,CAACD,IAAK,8BAA+BC,UAAW,OAAQC,MAAOpD,SAASpB,QAAQ+I,aAChF,CAACzE,IAAK,MAAOC,UAAW,kCAEf6B,kBACTH,MACAC,SACAC,WACF7G,MAAK,WACGT,KAAO,IACHuC,SAAS0B,GAAGkG,QAAQ,WAAY,WAC5BjI,KAAK1F,aAEduD,YAAYC,KAAMuC,SAASzB,cAAcjE,SAASC,YAAa,2BAA2B2D,MAAMC,WAC7FA,SAAS+G,SACT2C,OAAOC,SAASC,QAAO,SAGhCtE,OAAM,SAab+D,iBAAiB5H,GAAIW,OAAQP,gBAEnBgI,WAAahI,SAAS0B,GAAGkG,QAAQ,WAAY,IAC7CK,gBAAkBjI,SAASzB,cAAcjE,SAASuB,qBACpD6E,OAASuH,sBACPxK,KAAO,IACHuK,kBACIrI,KAAK1F,QAInB2F,GAAGP,sBAEE7B,YAAYC,KAAM,KAAM,8BAA8BS,MAAKC,iBAEtD+J,QAAU/J,SAASgK,gBAGnB7G,SAAWC,iBAAKC,cAAc,OAAQ,CAACzB,OAAQ,MAC/C0B,iBAAmBF,iBAAKC,cAAc,OAAQ,OAAUnH,qBAC1DqH,GAAI,2CACE,wBAAyB,UAAUxD,MAAKI,SAC9CmD,iBAAiBjD,UAAYF,gBAE3BqD,OAASJ,iBAAKC,cAAc,QAAS,CAACK,KAAM,UAAWD,KAAM,OAAQE,MAAOoG,QAC9EnG,aAAc,yBAA2B,sBAAuBC,UAAW,MAG/EV,SAASc,YAAYT,QACrBL,SAAS1C,QAAQ8B,OAASA,OAAO2B,UACjC4F,gBAAgB3F,WAAWC,aAAad,iBAAkBwG,iBAC1DjI,SAASzB,cAAcjE,SAASM,iBAAiB4H,aAAalB,SAAUZ,QAGxEiB,OAAOc,QACPd,OAAOe,SAEPf,OAAO9C,iBAAiB,QAAQC,OAASa,KAAKyI,uBAAuBtJ,MAAOkB,UAAU,KACtF2B,OAAO9C,iBAAiB,WAAYC,QACd,WAAdA,MAAMoE,UACDkF,uBAAuBtJ,MAAOkB,UAAU,MAIrDsB,SAASzC,iBAAiB,UAAWC,OAAUa,KAAK0I,uBAAuBvJ,MAAOkB,SAAUkI,gBACvFI,mBAAoB,kCAWJ1I,GAAII,SAAUkI,SAEvCtI,GAAGP,qBAECkJ,QADiBvI,SAASzB,wBAAiBjE,SAASiC,wBAAejC,SAASkC,eACrDsF,MAAMsF,eAC5BoB,sBAAsBxI,UAEX,OAAZuI,SAAoBA,UAAYL,qBAI9BD,gBAAkBjI,SAASzB,cAAcjE,SAASuB,qBACpD4M,oBAAsBF,QACH,KAAnBA,QAAQnB,QAERqB,0BAA4B,kBAAU,gBAAiB,QACvDR,gBAAgB3I,UAAUC,IAAI,YAG9B0I,gBAAgB3I,UAAUE,OAAO,WAErCyI,gBAAgB9D,YAAcsE,0BAExBhL,KAAO,YACK8K,WACRvI,SAAS0B,GAAGkG,QAAQ,WAAY,WAC5BjI,KAAK1F,kBAITkE,eAAiBwB,KAAKnC,YAAYC,KAAMuC,SAASzB,cAAcjE,SAASwB,qBAC1E,oCACAqC,SAAU,CAGNoK,UAAYpK,SAASgK,kBACmB,KAApChK,SAASgK,gBAAgBf,QAEzBqB,0BAA4B,kBAAU,gBAAiB,QACvDR,gBAAgB3I,UAAUC,IAAI,aAE9BkJ,oBAAsBtK,SAASgK,gBAE/BF,gBAAgB3I,UAAUE,OAAO,YAErCyI,gBAAgB9D,YAAcsE,2BAG5BC,gBAAkB1I,SAASzB,cAAcjE,SAASgB,iBACxDoN,gBAAgB7D,YAAc,kBAAU,qBAAsB,OAAQ1G,SAASgK,iBAC/EO,gBAAgBC,UAAY,kBAAU,qBAAsB,OAAQxK,SAASgK,uBAEvES,WAAa5I,SAASzB,cAAcjE,SAASa,mBAC/CyN,aACAA,WAAW/D,YAAc,kBAAU,uBAAwB,OAAQ1G,SAASgK,iBAC5ES,WAAWD,UAAY,kBAAU,uBAAwB,OAAQxK,SAASgK,mBAGpF,MAAOU,SAYbT,uBAAuBxI,GAAII,SAAUX,gBAC7BA,gBACAO,GAAGP,sBAEFmJ,sBAAsBxI,UAQ/BwI,sBAAsBxI,cAEbL,KAAK2I,8BAGLA,mBAAoB,QAEnBhH,SAAWtB,SAASzB,cAAcjE,SAASiC,aAC3CqK,aAAe5G,SAASzB,cAAc,2BAExC+C,WACAA,SAASgB,WAAWuE,mBAAmB,aAAcvF,SAAS1C,QAAQ8B,QACtEY,SAAS9B,UAEToH,cACAA,aAAapH,SAIjBuH,YAAW,IAAM/G,SAASzB,cAAcjE,SAASe,aAAaoH,SAAS,MAIlEvF,SAASqB,cAAc,uBAAwB,OAC1CyI,MAAQzF,iBAAKC,cAAc,QAAS,CACtCI,KAAM,OACNC,KAAM,gBACG,WAEb3E,SAASqB,cAAc,QAAQ6D,YAAY4E,QAYnDS,qBAAqB7H,GAAIW,OAAQP,cACzB8I,SACA9I,SAASzB,cAAcjE,SAASiB,4BAA4B6I,SAC5D0E,SAAW,EACX9I,SAASV,UAAUC,IAAI,cAEvBuJ,SAAW,EACX9I,SAASV,UAAUE,OAAO,aAI9BI,GAAGP,uBAGG5B,KAAO,CACTiE,GAAI1B,SAAS0B,GAAGkG,QAAQ,WAAY,IACpCmB,WAAYD,SACZ7D,OAAQtF,KAAK1F,aAIZuD,YAAYC,KAAMuC,SAASzB,cAAcjE,SAASkB,iBAAkB,4CAwB3E+B,OAASmB,KAAKC,MAAMzB,SAASqB,cAAcjE,SAASU,eAAe4D,QAAQrB"}