{"version":3,"file":"quiz_toolboxes.min.js","sources":["../src/quiz_toolboxes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the question slot template for each question in the quiz edit view.\n *\n * @module     mod_quiz/quiz_toolboxes\n * @copyright  2024 The Open University.\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport { slot } from 'mod_quiz/quiz_utils';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n// The CSS classes we use.\nconst CSS = {\n        ACTIVITYINSTANCE: 'activityinstance',\n        AVAILABILITYINFODIV: 'div.availabilityinfo',\n        CONTENTWITHOUTLINK: 'contentwithoutlink',\n        CONDITIONALHIDDEN: 'conditionalhidden',\n        DIMCLASS: 'dimmed',\n        DIMMEDTEXT: 'dimmed_text',\n        EDITINSTRUCTIONS: 'editinstructions',\n        EDITINGMAXMARK: 'editor_displayed',\n        HIDE: 'hide',\n        JOIN: 'page_join',\n        MODINDENTCOUNT: 'mod-indent-',\n        MODINDENTHUGE: 'mod-indent-huge',\n        PAGE: 'page',\n        SECTIONHIDDENCLASS: 'hidden',\n        SECTIONIDPREFIX: 'section-',\n        SELECTMULTIPLE: 'select-multiple',\n        SLOT: 'slot',\n        SHOW: 'editing_show',\n        TITLEEDITOR: 'titleeditor'\n    },\n    // The CSS selectors we use.\n    SELECTOR = {\n        ACTIONAREA: '.actions',\n        ACTIONLINKTEXT: '.actionlinktext',\n        ACTIVITYACTION: 'a.cm-edit-action[data-action], a.editing_maxmark, a.editing_section, input.shuffle_questions',\n        ACTIVITYFORM: 'span.instancemaxmarkcontainer form',\n        ACTIVITYINSTANCE: '.' + CSS.ACTIVITYINSTANCE,\n        SECTIONINSTANCE: '.sectioninstance',\n        ACTIVITYLI: 'li.activity, li.section',\n        ACTIVITYMAXMARK: 'input[name=maxmark]',\n        COMMANDSPAN: '.commands',\n        CONFIGTOOLBOX: '.config-toolbox',\n        CONTENTAFTERLINK: 'div.contentafterlink',\n        CONTENTWITHOUTLINK: 'div.contentwithoutlink',\n        DELETESECTIONICON: 'a.editing_delete .icon',\n        EDITMAXMARK: 'a.editing_maxmark',\n        EDITSECTION: 'a.editing_section',\n        EDITSECTIONICON: 'a.editing_section .icon',\n        EDITSHUFFLEQUESTIONSACTION: 'input.cm-edit-action[data-action]',\n        EDITSHUFFLEAREA: '.instanceshufflequestions .shuffle-progress',\n        HIDE: 'a.editing_hide',\n        HIGHLIGHT: 'a.editing_highlight',\n        INSTANCENAME: 'span.instancename',\n        INSTANCEMAXMARK: 'span.instancemaxmark',\n        INSTANCESECTION: 'span.instancesection',\n        INSTANCESECTIONAREA: 'div.section-heading',\n        MAXMARKCONTAINER: '.instancemaxmarkcontainer',\n        MODINDENTDIV: '.mod-indent',\n        MODINDENTOUTER: '.mod-indent-outer',\n        NUMQUESTIONS: '.numberofquestions',\n        PAGECONTENT: 'div#page-content',\n        PAGELI: 'li.page',\n        SECTIONLI: 'li.section',\n        SECTIONUL: 'ul.section',\n        SECTIONFORM: '.instancesectioncontainer form',\n        SECTIONINPUT: 'input[name=section]',\n        SELECTMULTIPLEBUTTON: '#selectmultiplecommand',\n        SELECTMULTIPLECANCELBUTTON: '#selectmultiplecancelcommand',\n        SELECTMULTIPLECHECKBOX: '.select-multiple-checkbox',\n        SELECTMULTIPLEDELETEBUTTON: '#selectmultipledeletecommand',\n        SELECTALL: '#questionselectall',\n        SHOW: 'a.' + CSS.SHOW,\n        SLOTLI: 'li.slot',\n        SUMMARKS: '.mod_quiz_summarks'\n    },\n    BODY = document.body;\nclass ResourceToolBox extends ToolBox{\n    courseId = 0;\n    quizId = 0;\n    ajaxURL = null;\n    config = {};\n\n    /**\n     * An Array of events added when editing a max mark field.\n     * These should all be detached when editing is complete.\n     *\n     * @property editMaxMarkEvents\n     * @protected\n     * @type Array\n     * @protected\n     */\n    editMaxMarkEvents = [];\n\n    constructor(courseId, quizId, ajaxURL) {\n        const config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n        super(config, courseId, quizId);\n        this.courseId = courseId;\n        this.quizId = quizId;\n        this.ajaxURL = ajaxURL;\n        this.config = config;\n        // this.config = config;\n        // M.mod_quiz.quizbase.register_module(this);\n        BODY.addEventListener('click', (event) => {\n            // Use event.target.closest to ensure event delegation works\n            if (event.target.closest(SELECTOR.ACTIVITYACTION) ||\n                    event.target.closest(SELECTOR.DEPENDENCY_LINK)) {\n                this.handleDataAction(event);\n            }\n        });\n    }\n\n    /**\n     * Handles the delegation event. When this is fired someone has triggered an action.\n     *\n     * Note not all actions will result in an AJAX enhancement.\n     *\n     * @protected\n     * @method handleDataAction\n     * @param {Event} ev The event that was triggered.\n     * @returns {boolean}\n     */\n    handleDataAction(ev) {\n        // We need to get the anchor element that triggered this event.\n        let node = ev.target;\n        if (!(this.isATag(node))) {\n            node = node.closest(SELECTOR.ACTIVITYACTION);\n        }\n\n        // From the anchor we can get both the activity (added during initialisation) and the action being\n        // performed (added by the UI as a data attribute).\n        const action = node.dataset.action,\n            activity = node.closest(SELECTOR.ACTIVITYLI);\n\n        if (!(this.isATag(node)) || !action || !activity) {\n            // It wasn't a valid action node.\n            return;\n        }\n\n        // Switch based upon the action and do the desired thing.\n        switch (action) {\n            case 'editmaxmark':\n                // The user wishes to edit the max mark of the resource.\n                this.editMaxMark(ev, node, activity);\n                break;\n            case 'delete':\n                // The user is deleting the activity.\n                this.deleteWithConfirmation(ev, node, activity, action);\n                break;\n            case 'addpagebreak':\n            case 'removepagebreak':\n                // The user is adding or removing a page break.\n                this.updatePageBreak(ev, node, activity, action);\n                break;\n            case 'adddependency':\n            case 'removedependency':\n                // The user is adding or removing a dependency between questions.\n                this.updateDependency(ev, node, activity, action);\n                break;\n            default:\n                // Nothing to do here!\n                break;\n        }\n    }\n\n    isATag(node) {\n        return node.tagName.toLowerCase() === 'a';\n    }\n\n    /**\n     * Edit the max mark for the resource.\n     *\n     * @protected\n     * @method editMaxMark\n     * @param {Event} ev The event that was fired.\n     * @param {Element} button The button that triggered this action.\n     * @param {Element} activity The activity node that this action will be performed on.\n     * @return Boolean\n     */\n    editMaxMark(ev, button, activity) {\n        // Get the element we're working on.\n        const instanceMaxmark = activity.querySelector(SELECTOR.INSTANCEMAXMARK),\n            instance = activity.querySelector(SELECTOR.ACTIVITYINSTANCE),\n            anchor = instanceMaxmark, // Grab the anchor so that we can swap it with the edit form.\n            oldMaxMark = instanceMaxmark.firstChild.nodeValue,\n            data = {\n                'id': slot.getId(activity),\n                'quizid': this.quizId,\n            };\n        let maxMarkText = oldMaxMark;\n        let thisEvent;\n\n        // Prevent the default actions.\n        ev.preventDefault();\n        const pending = new Pending('get-max-mark');\n        this.sendRequest(data, null, 'mod_quiz_get_max_mark')\n            .then(response => {\n                if (M.core.actionmenu && M.core.actionmenu.instance) {\n                    M.core.actionmenu.instance.hideMenu(ev);\n                }\n                // Try to retrieve the existing string from the server.\n                if (response.instancemaxmark) {\n                    maxMarkText = response.instancemaxmark;\n                }\n\n                // Create the editor and submit button.\n                const editForm = this.createElement(\"form\", {action: '#'});\n\n                const editInstructions = this.createElement('span', {\n                    id: 'id_editinstructions',\n                    class: CSS.EDITINSTRUCTIONS,\n                });\n\n                editInstructions.innerHTML = M.util.get_string('edittitleinstructions', 'moodle');\n\n                const editor = this.createElement('input', {\n                    type: 'text',\n                    name: 'maxmark',\n                    class: CSS.TITLEEDITOR,\n                    value: maxMarkText,\n                    autocomplete: 'off',\n                    ['aria-describedby']: 'id_editinstructions',\n                    maxLength: 12,\n                    size: parseInt(this.config.questiondecimalpoints, 10) + 2,\n                })\n\n\n                // Clear the existing content and put the editor in.\n                editForm.appendChild(editor);\n                editForm.dataset.anchor = anchor.outerHTML;\n                instance.parentNode.insertBefore(editInstructions, instance);\n                // Replace anchor span with the editForm input to edit.\n                activity.querySelector(SELECTOR.MAXMARKCONTAINER).replaceChild(editForm, anchor);\n\n                // We hide various components whilst editing:\n                activity.classList.add(CSS.EDITINGMAXMARK);\n\n                // Focus and select the editor text.\n                editor.focus();\n                editor.select();\n\n                // Cancel the edit if we lose focus or the escape key is pressed.\n                editor.addEventListener('blur', event => this.handleMaxMarkEditorBlur\n                    .call(this, event, activity, false));\n                editor.addEventListener('keydown', event => this.handleMaxMarkEditorType\n                    .call(this, event, activity, true));\n                // Handle form submission.\n                editForm.addEventListener('submit', event => this.handleMaxMarkFormSubmit\n                    .call(this, event, activity, oldMaxMark));\n\n                // Store the event listeners for later removal\n                this.editMaxMarkEvents = [\n                    {type: 'blur', handler: this.handleMaxMarkEditorBlur, element:  editor},\n                    {type: 'keydown', handler: this.handleMaxMarkEditorType, element: editor},\n                    {type: 'submit', handler: this.handleMaxMarkFormSubmit, element: editForm}\n                ];\n            })\n            .catch(Notification.exception);\n    }\n\n    handleMaxMarkEditorBlur(event, activity, preventDefault) {\n        return this.editMaxMarkCancel(event, activity, preventDefault);\n    }\n\n    handleMaxMarkEditorType(event, activity, preventDefault) {\n        if (event.key === 'Escape' || event.keyCode === 27) {\n            this.editMaxMarkCancel(event, activity, preventDefault);\n        }\n    }\n\n    handleMaxMarkFormSubmit(event, activity, oldMaxMark) {\n        event.preventDefault(); // Prevent the default form submission behavior\n        return this.editMaxMarkSubmit(event, activity, oldMaxMark);\n    }\n\n    deleteWithConfirmation() {\n\n    }\n\n    updatePageBreak() {\n\n    }\n\n    updateDependency() {\n\n    }\n\n    createElement(tag, attributes) {\n        const element = document.createElement(tag);\n        for (let key in attributes) {\n            element.setAttribute(key, attributes[key]);\n        }\n\n        return element;\n    }\n\n    /**\n     * Handles the cancel event when editing the activity or resources maxmark.\n     *\n     * @protected\n     * @method editMaxMarkCancel\n     * @param {Event} ev The event that triggered this.\n     * @param {Node} activity The activity whose maxmark we are altering.\n     * @param {Boolean} preventDefault If true we should prevent the default action from occuring.\n     */\n    editMaxMarkCancel(ev, activity, preventDefault) {\n        if (preventDefault) {\n            ev.preventDefault();\n        }\n\n        this.editMaxMarkClear(activity);\n    }\n\n    /**\n     * Handles clearing the editing UI and returning things to the original state they were in.\n     *\n     * @protected\n     * @method editMaxMarkClear\n     * @param {Element} activity  The activity whose maxmark we were altering.\n     */\n    editMaxMarkClear(activity) {\n        console.log(this.editMaxMarkEvents);\n        // Detach all listen events to prevent duplicate triggers\n        this.editMaxMarkEvents.forEach(event => {\n            event.element.removeEventListener(event.type, event.handler);\n        });\n\n\n        const editForm = activity.querySelector(SELECTOR.ACTIVITYFORM),\n            instructions = activity.querySelector('#id_editinstructions');\n        if (editForm) {\n            editForm.parentNode.append(editForm.dataset.anchor);\n            editForm.remove();\n        }\n        if (instructions) {\n            instructions.parentNode.removeChild(instructions);\n        }\n\n        // Remove the editing class again to revert the display.\n        activity.classList.remove(CSS.EDITINGMAXMARK);\n\n        // Refocus the link which was clicked originally so the user can continue using keyboard nav.\n        setTimeout(function() {\n            activity.querySelector(SELECTOR.EDITMAXMARK).focus();\n        }, 100);\n\n        // TODO MDL-50768 This hack is to keep Behat happy until they release a version of\n        // MinkSelenium2Driver that fixes\n        // https://github.com/Behat/MinkSelenium2Driver/issues/80.\n        if (!document.querySelector('input[name=maxmark]')) {\n            const input = this.createElement('input', {\n                type: 'text',\n                name: 'maxmark',\n                class: 'd-none',\n            })\n            document.querySelector('body').appendChild(input);\n        }\n    }\n\n    editMaxMarkSubmit() {\n\n    }\n}\n\nclass ToolBox {\n    config= {};\n    quizId = 0;\n    courseId = 0;\n\n    constructor(config, courseId, quizId) {\n        this.config = config;\n        this.courseId = courseId;\n        this.quizId = quizId;\n    }\n    /**\n     * Send a request using the REST API\n     *\n     * @method sendRequest\n     * @param {Object} data The data to submit with the AJAX request\n     * @param {Element} [statusSpinner] A statusSpinner which may contain a section loader\n     * @param {String} methodName The service name.\n     * @param {Object} [optionalConfig] Any additional configuration to submit\n     * @chainable\n     */\n    sendRequest(data, statusSpinner, methodName, optionalConfig) {\n        // Default data structure\n        // if (!data) {\n        //     data = {};\n        // }\n\n        // Handle any variables which we must pass back through to\n        // const pageParams = this.config.pageparams;\n        // for (let varName in pageParams) {\n        //     data[varName] = pageParams[varName];\n        // }\n\n        // data.sesskey = M.cfg.sesskey;\n        // data.courseid = this.courseId;\n        // data.quizid = this.quizId;\n\n        const parameters = {\n            methodname: methodName,\n            args: data,\n        };\n        // var uri = M.cfg.wwwroot + this.get('ajaxurl');\n        //\n        // // Define the configuration to send with the request\n        // var responsetext = [];\n        // var config = {\n        //     method: 'POST',\n        //     data: data,\n        //     on: {\n        //         success: function(tid, response) {\n        //             try {\n        //                 responsetext = Y.JSON.parse(response.responseText);\n        //                 if (responsetext.error) {\n        //                     new M.core.ajaxException(responsetext);\n        //                 }\n        //             } catch (e) {\n        //                 // Ignore.\n        //             }\n        //\n        //             // Run the callback if we have one.\n        //             if (responsetext.hasOwnProperty('newsummarks')) {\n        //                 Y.one(SELECTOR.SUMMARKS).setHTML(responsetext.newsummarks);\n        //             }\n        //             if (responsetext.hasOwnProperty('newnumquestions')) {\n        //                 Y.one(SELECTOR.NUMQUESTIONS).setHTML(\n        //                     M.util.get_string('numquestionsx', 'quiz', responsetext.newnumquestions)\n        //                 );\n        //             }\n        //             if (successCallback) {\n        //                 Y.bind(successCallback, this, responsetext)();\n        //             }\n        //\n        //             if (statusSpinner) {\n        //                 window.setTimeout(function() {\n        //                     statusSpinner.hide();\n        //                 }, 400);\n        //             }\n        //         },\n        //         failure: function(tid, response) {\n        //             if (statusSpinner) {\n        //                 statusSpinner.hide();\n        //             }\n        //             new M.core.ajaxException(response);\n        //         }\n        //     },\n        //     context: this\n        // };\n\n        // Apply optional config\n        if (optionalConfig) {\n            for (let varName in optionalConfig) {\n                config[varName] = optionalConfig[varName];\n            }\n        }\n\n        if (statusSpinner) {\n            statusSpinner.classList.remove('d-none');\n        }\n\n        return fetchMany([parameters])[0];\n    }\n}\n\n/**\n * In a given group, set all the drags and drops to be the same size.\n *\n * @param {Object} config the config data.\n */\nfunction init_resource_toolbox(courseid, quizid, ajaxurl) {\n    console.table(courseid, quizid, ajaxurl);\n    const toolBox = new ResourceToolBox(courseid, quizid, ajaxurl);\n}\n\nexport {\n    init_resource_toolbox,\n}"],"names":["courseid","quizid","ajaxurl","console","table","ResourceToolBox","CSS","SELECTOR","ACTIONAREA","ACTIONLINKTEXT","ACTIVITYACTION","ACTIVITYFORM","ACTIVITYINSTANCE","SECTIONINSTANCE","ACTIVITYLI","ACTIVITYMAXMARK","COMMANDSPAN","CONFIGTOOLBOX","CONTENTAFTERLINK","CONTENTWITHOUTLINK","DELETESECTIONICON","EDITMAXMARK","EDITSECTION","EDITSECTIONICON","EDITSHUFFLEQUESTIONSACTION","EDITSHUFFLEAREA","HIDE","HIGHLIGHT","INSTANCENAME","INSTANCEMAXMARK","INSTANCESECTION","INSTANCESECTIONAREA","MAXMARKCONTAINER","MODINDENTDIV","MODINDENTOUTER","NUMQUESTIONS","PAGECONTENT","PAGELI","SECTIONLI","SECTIONUL","SECTIONFORM","SECTIONINPUT","SELECTMULTIPLEBUTTON","SELECTMULTIPLECANCELBUTTON","SELECTMULTIPLECHECKBOX","SELECTMULTIPLEDELETEBUTTON","SELECTALL","SHOW","SLOTLI","SUMMARKS","BODY","document","body","constructor","config","courseId","quizId","sendRequest","data","statusSpinner","methodName","optionalConfig","parameters","methodname","args","varName","classList","remove","ajaxURL","JSON","parse","querySelector","dataset","addEventListener","event","target","closest","DEPENDENCY_LINK","handleDataAction","ev","node","this","isATag","action","activity","editMaxMark","deleteWithConfirmation","updatePageBreak","updateDependency","tagName","toLowerCase","button","instanceMaxmark","instance","anchor","oldMaxMark","firstChild","nodeValue","slot","getId","maxMarkText","preventDefault","Pending","then","response","M","core","actionmenu","hideMenu","instancemaxmark","editForm","createElement","editInstructions","id","class","innerHTML","util","get_string","editor","type","name","value","autocomplete","maxLength","size","parseInt","questiondecimalpoints","appendChild","outerHTML","parentNode","insertBefore","replaceChild","add","focus","select","handleMaxMarkEditorBlur","call","handleMaxMarkEditorType","handleMaxMarkFormSubmit","editMaxMarkEvents","handler","element","catch","Notification","exception","editMaxMarkCancel","key","keyCode","editMaxMarkSubmit","tag","attributes","setAttribute","editMaxMarkClear","log","forEach","removeEventListener","instructions","append","removeChild","setTimeout","input"],"mappings":"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"}