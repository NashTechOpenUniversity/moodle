{"version":3,"file":"user.min.js","sources":["../../src/searchwidget/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for student within the report.\n *\n * @module    mod_quiz/searchwidget/user\n * @copyright 2024 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport UserSearch from 'core_user/comboboxsearch/user';\nimport Url from 'core/url';\nimport * as Repository from 'mod_quiz/searchwidget/repository';\nimport {getStrings} from 'core/str';\n\nexport default class QuizUserSearch extends UserSearch {\n\n    static extraParams;\n    constructor() {\n        super();\n    }\n\n    static init(extraParams = null) {\n        QuizUserSearch.extraParams = extraParams;\n        return new QuizUserSearch();\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    fetchDataset() {\n        const params = {\n            cmid: QuizUserSearch.extraParams.cmid,\n            mode: QuizUserSearch.extraParams.reportmode,\n            params: JSON.stringify(QuizUserSearch.extraParams?.params),\n        };\n\n        return Repository.userFetch(params).then((r) => {\n            this.profilestringmap = getStrings(r.extrafields.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    r.extrafields.map((key, index) => ([key, stringArray[index]]))\n                ));\n                return r.users;\n        });\n    }\n\n    /**\n     * Build up the view all link.\n     *\n     * @returns {string|*}\n     */\n    selectAllResultsLink() {\n        return Url.relativeUrl(QuizUserSearch.extraParams.path, {\n            ...QuizUserSearch.extraParams.params,\n            gpr_search: this.getSearchTerm(),\n        }, false);\n    }\n\n    /**\n     * Build up the link that is dedicated to a particular result.\n     *\n     * @param {Number} userID The ID of the user selected.\n     * @returns {string|*}\n     */\n    selectOneLink(userID) {\n        return Url.relativeUrl(QuizUserSearch.extraParams.path, {\n            ...QuizUserSearch.extraParams.params,\n            gpr_search: this.getSearchTerm(),\n            gpr_userid: userID,\n        }, false);\n    }\n}\n"],"names":["QuizUserSearch","UserSearch","constructor","extraParams","fetchDataset","params","cmid","mode","reportmode","JSON","stringify","_QuizUserSearch$extra","Repository","userFetch","then","r","profilestringmap","extrafields","map","key","stringArray","Map","index","users","selectAllResultsLink","Url","relativeUrl","path","gpr_search","this","getSearchTerm","selectOneLink","userID","gpr_userid"],"mappings":"61CA2BqBA,uBAAuBC,cAGxCC,wCAIYC,mEAAc,YACtBH,eAAeG,YAAcA,YACtB,IAAIH,eAQfI,+CACUC,OAAS,CACXC,KAAMN,eAAeG,YAAYG,KACjCC,KAAMP,eAAeG,YAAYK,WACjCH,OAAQI,KAAKC,wCAAUV,eAAeG,oDAAfQ,sBAA4BN,gBAGhDO,WAAWC,UAAUR,QAAQS,MAAMC,SACjCC,kBAAmB,mBAAWD,EAAEE,YAAYC,KAAKC,OAAUA,IAAAA,SAC3DL,MAAMM,aAAgB,IAAIC,IACvBN,EAAEE,YAAYC,KAAI,CAACC,IAAKG,QAAW,CAACH,IAAKC,YAAYE,aAElDP,EAAEQ,SASrBC,8BACWC,aAAIC,YAAY1B,eAAeG,YAAYwB,KAAM,IACjD3B,eAAeG,YAAYE,OAC9BuB,WAAYC,KAAKC,kBAClB,GASPC,cAAcC,eACHP,aAAIC,YAAY1B,eAAeG,YAAYwB,KAAM,IACjD3B,eAAeG,YAAYE,OAC9BuB,WAAYC,KAAKC,gBACjBG,WAAYD,SACb,oGAxDUhC"}