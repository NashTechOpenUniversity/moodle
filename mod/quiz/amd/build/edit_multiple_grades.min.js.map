{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport {render as renderTemplate, replaceNode, runTemplateJS, renderForPromise} from 'core/templates';\nimport Modal from 'core/modal';\nimport {prefetchStrings} from 'core/prefetch';\nimport Fragment from 'core/fragment';\n\n/**\n * @type {Object} selectors used in this code.\n */\nconst SELECTORS = {\n    'addGradeItemButton': '#mod_quiz-add_grade_item',\n    'autoSetupButton': '#mod_quiz-grades_auto_setup',\n    'editingPageContents': '#edit_grading_page-contents',\n    'gradeItemList': 'table#mod_quiz-grade-item-list',\n    'gradeItemSelect': 'select[data-slot-id]',\n    'gradeItemSelectId': (id) => 'select#grade-item-choice-' + id,\n    'gradeItemTr': 'table#mod_quiz-grade-item-list tr[data-quiz-grade-item-id]',\n    'inplaceEditable': 'span.inplaceeditable',\n    'inplaceEditableOn': 'span.inplaceeditable.inplaceeditingon',\n    'resetAllButton': '#mod_quiz-grades_reset_all',\n    'slotList': 'table#mod_quiz-slot-list',\n    'updateGradeItemLink': (id) => 'tr[data-quiz-grade-item-id=\"' + id + '\"] .quickeditlink',\n};\n\nprefetchStrings('mod_quiz', [\n    'overallfeedback_for',\n    'insertfeedbackbefore',\n]);\n\nlet modal;\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst createGradeItem = (\n    quizId,\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: ''}],\n    }\n});\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to update.\n * @param {String} newName the new name to set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateGradeItem = (\n    quizId,\n    gradeItemId,\n    newName\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n});\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to delete.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst deleteGradeItem = (\n    quizId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to update the quiz grade item used by a slot.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} slotId id of the slot to update.\n * @param {Number|null} gradeItemId new grade item ot set, or null to un-set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateSlotGradeItem = (\n    quizId,\n    slotId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_slots',\n    args: {\n        quizid: quizId,\n        slots: [{id: slotId, quizgradeitemid: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to setup one grade item for each quiz section.\n *\n * @param {Number} quizId id of the quiz to update.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst autoSetupGradeItems = (\n    quizId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_item_per_section',\n    args: {\n        quizid: quizId\n    }\n});\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object} methodCall a web service call to pass to fetchMany. Must include methodCall.args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServiceAndReturnRenderingData = (methodCall) => callServicesAndReturnRenderingData([methodCall]);\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object[]} methodCalls web service calls to pass to fetchMany. Must include methodCalls[0].args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServicesAndReturnRenderingData = (methodCalls) => {\n    methodCalls.push({\n            methodname: 'mod_quiz_get_edit_grading_page_data',\n            args: {\n                quizid: methodCalls[0].args.quizid,\n            }\n        });\n    return Promise.all(fetchMany(methodCalls))\n    .then(results => JSON.parse(results.at(-1)));\n};\n\nconst handleGradeItemAddFeedback = async(e) => {\n    e.preventDefault();\n    const pending = new Pending('add-overall-feedback');\n    const tableCell = e.target.closest('td');\n    const tableRow = tableCell.closest('tr');\n    const contextId = Number(e.target.dataset.contextid);\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n    const footerTemplate = await renderForPromise('mod_quiz/overallfeedback_footer_modal', {});\n    const rawName = tableRow.querySelector('th span.inplaceeditable').dataset.rawName;\n    modal = await Modal.create({\n        title: getString('overallfeedback_for', 'mod_quiz', rawName),\n        body: '',\n        footer: footerTemplate.html,\n        show: true,\n        removeOnClose: true,\n        large: true,\n        templateContext: {\n            classes: 'overallfeedback',\n        },\n    });\n\n    const modalBody = modal.getBody()[0];\n    modalBody.dataset.quizid = quizId;\n    modalBody.dataset.gradeItemId = gradeItemId;\n    await addIconToContainer(modalBody, pending);\n    const fragment = Fragment.loadFragment('mod_quiz', 'load_overall_feedback_data', contextId, {\n        quizId,\n        gradeItemId,\n    });\n\n    fragment.done(function(html, js) {\n\n        modalBody.innerHTML = html;\n        // Need to wait util html already appended into DOM.\n        setTimeout(() => {\n            runTemplateJS(js);\n            // Enable submit button.\n            modal.getFooter()[0].querySelectorAll('input').forEach(inputEl => {\n               inputEl.disabled = false;\n            });\n            modalBody.querySelectorAll('.divider button.feedbackadd-button').forEach(addFeedback => {\n                addFeedback.addEventListener('click', e => {\n                    e.preventDefault();\n                    handleAddMoreFeedback(e, modalBody, contextId);\n                });\n            });\n            modal.getFooter()[0].querySelectorAll('input[type=\"submit\"]').forEach(input => {\n                input.addEventListener('click', handleSubmitModal);\n            })\n        }, 100);\n\n        pending.resolve();\n    });\n};\n\nconst handleSubmitModal = (e) => {\n    e.preventDefault();\n    const target = e.currentTarget;\n    const action = target.dataset.action;\n    switch (action) {\n        case \"cancel\":\n            modal.hide();\n            break;\n        case \"save\":\n            saveFeedback(e);\n            break;\n        default:\n            break;\n    }\n};\n\nconst saveFeedback = async (e) => {\n    console.log(\"save feedback\");\n    const formData = collectFormData();\n    // Remove first 100% data from formData, we don't need to validate it.\n    const firstData = formData.shift();\n\n    const options = {\n        methodname: 'mod_quiz_validate_overall_feedback_per_grade_item',\n        args: {\n            formdata: JSON.stringify(formData),\n            quizid: parseInt(modal.getBody()[0].dataset.quizid),\n        },\n    };\n\n    try {\n        // Server-side validation.\n        const result = await fetchMany([options])[0];\n        // Toggle error messages.\n        displayErrors(JSON.parse(result.errors));\n        if (result.isvalid) {\n            const formatedData = JSON.parse(result.data);\n            formatedData.unshift(firstData);\n            const saveOptions = {\n                methodname: 'mod_quiz_save_overall_feedback_per_grade_item',\n                args: {\n                    formdata: JSON.stringify(formatedData),\n                    quizid: parseInt(modal.getBody()[0].dataset.quizid),\n                    gradeitemid: parseInt(modal.getBody()[0].dataset.gradeItemId),\n\n                },\n            };\n\n            const response = await fetchMany([saveOptions])[0];\n            console.log(response);\n        }\n    } catch (e) {\n        return Notification.exception(e);\n    }\n};\n\nconst displayErrors = (errors) => {\n    const body = modal.getBody()[0];\n    let feedbackTextIndex = 0;\n\n    // We need to go through all the input elements to display error messages\n    // for invalid inputs and clear error messages for valid ones.\n    body.querySelectorAll('form .fitem').forEach(el => {\n        // Check the container type. It can be static, text (boundaries), or editor (feedback).\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        switch (type) {\n            case 'text': {\n                const inputBoundary = el.querySelector('input[name^=\"feedbackboundaries\"]');\n                const errorText = errors[inputBoundary.name];\n                const feedback = inputBoundary.closest('.felement').querySelector('.invalid-feedback');\n                if (errorText) {\n                    // If an error occurs with the feedback boundaries input, we need to display an error message.\n                    inputBoundary.classList.add('is-invalid');\n                    inputBoundary.setAttribute('autofocus', true);\n                    feedback.classList.add('d-block');\n                    feedback.innerText = errorText;\n                    inputBoundary.setAttribute('aria-describedby', feedback.id);\n                } else {\n                    // If the feedback boundaries input is valid, we need to remove the error message.\n                    inputBoundary.classList.remove('is-invalid');\n                    inputBoundary.removeAttribute('autofocus');\n                    feedback.classList.remove('d-block');\n                    feedback.innerText = '';\n                }\n            }\n                break;\n            case 'editor': {\n                const textAreaFeedback = el.querySelector('textarea[name^=\"feedbacktext\"]');\n               // Skip the first editor when the boundary is 100%.\n                if (textAreaFeedback.id === 'id_feedbacktext_0_text') {\n                    break;\n                }\n                const errorText = errors[`feedbacktext[${feedbackTextIndex}]`];\n                const feedbackEl = el.querySelector('.invalid-feedback');\n                if (errorText) {\n                    feedbackEl.innerText = errorText;\n                    feedbackEl.classList.add('d-block');\n                } else {\n                    feedbackEl.innerText = '';\n                    feedbackEl.classList.remove('d-block');\n                }\n                feedbackTextIndex++;\n            }\n                break;\n            default:\n                break;\n        }\n    });\n};\n\nconst collectFormData = () => {\n    const items = modal.getBody()[0].querySelectorAll('form .fitem');\n    const formData = [];\n    const itemData = {};\n    items.forEach((el) => {\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        if (type) {\n            switch (type) {\n                case 'static':\n                    itemData.boundary = 11;\n                    break;\n                case 'text':\n                    itemData.boundary = el.querySelector('input[name^=\"feedbackboundaries\"]').value;\n                    break;\n                case 'editor':\n                    itemData.feedback = {\n                        itemid: el.querySelector('input[type=\"hidden\"][name$=\"[text][itemid]\"]').value,\n                        format: el.querySelector('input[type=\"hidden\"][name$=\"[text][format]\"]').value,\n                        text: el.querySelector('textarea[name^=\"feedbacktext\"]').value,\n                    };\n                    formData.push({...itemData});\n                    break;\n                default:\n                    break;\n            }\n        }\n    });\n\n    return formData;\n};\n\nconst handleAddMoreFeedback = async (e, modalBody, contextId) => {\n    const target = e.currentTarget;\n    const {after, action} = target.dataset;\n    // Get the order number of the new feedback form. This is necessary to create a unique feedback form.\n    const order = modalBody.querySelectorAll(`textarea[id^=\"id_feedbacktext_${after}_temporary\"`).length;\n    const fragment = Fragment.loadFragment('mod_quiz', 'load_overall_feedback_form', contextId, {\n        after,\n        order,\n    });\n    const divider = modalBody.querySelector(`.modal-body .divider button[data-after=\"${after}\"]`).closest('.divider');\n    fragment.done(function(html, js) {\n        divider.insertAdjacentHTML('afterend', html);\n        runTemplateJS(js);\n        recalculateFeedbackIndex(modalBody, after, contextId);\n        // Set a flag if the button already has an event added.\n        target.dataset.eventAttached = true;\n    });\n};\n\nconst recalculateFeedbackIndex = (modalBody, after, contextId) => {\n    const gradeBoundaryEls = modalBody.querySelectorAll('input[name^=\"feedbackboundaries\"]');\n    const dividerButtonEls = modalBody.querySelectorAll('.divider button');\n    gradeBoundaryEls.forEach((el, key) => {\n        if (key <= after) {\n            // Re-update id or label for every elements.\n            const wrapItem = el.closest('.fitem');\n            const label = wrapItem.querySelector('label[id^=\"id_feedbackboundaries_\"]');\n            const inputBoundary = wrapItem.querySelector('input[name^=\"feedbackboundaries\"]');\n            wrapItem.id = 'fitem_id_feedbackboundaries_' + key;\n            label.id = `id_feedbackboundaries_${key}_label`;\n            label.setAttribute('for', `id_feedbackboundaries_${key}`);\n            inputBoundary.id = 'id_feedbackboundaries_' + key;\n            inputBoundary.name = `feedbackboundaries[${key}]`;\n            wrapItem.querySelector('.invalid-feedback').id = 'id_error_feedbackboundaries_' + key;\n        }\n    });\n\n    // Re-update devider.\n    dividerButtonEls.forEach((el, key) => {\n        el.dataset.after = key;\n        getString('insertfeedbackbefore', 'mod_quiz', {afterindex: key}).then(string => {\n            el.setAttribute('aria-label', string);\n        });\n\n        if (el.dataset.eventAttached === 'false') {\n            el.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, modalBody, contextId);\n            });\n        }\n    });\n};\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    let nextItemToFocus;\n    if (tableRow.nextElementSibling) {\n        nextItemToFocus = SELECTORS.updateGradeItemLink(tableRow.nextElementSibling.dataset.quizGradeItemId);\n    } else {\n        nextItemToFocus = SELECTORS.addGradeItemButton;\n    }\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(nextItemToFocus).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditable);\n\n    document.querySelectorAll(SELECTORS.inplaceEditableOn).forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"sr-only\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control w-100\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainer(tableCell);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.updateGradeItemLink(gradeItemId)).focus({'focusVisible': true});\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the contents of the page with the page re-rendered from the provided data, once that promise resolves.\n *\n * @param {Object} editGradingPageData the template context data required to re-render the page.\n * @returns {Promise<void>} a promise that will resolve when the page is updated.\n */\nconst reRenderPage = (editGradingPageData) =>\n    renderTemplate('mod_quiz/edit_grading_page', editGradingPageData)\n        .then((html, js) => replaceNode(document.querySelector(SELECTORS.editingPageContents), html, js || ''));\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle when the selected grade item for a slot is changed.\n *\n * @param {Event} e event.\n */\nconst handleSlotGradeItemChanged = (e) => {\n    const select = e.target.closest(SELECTORS.gradeItemSelect);\n\n    // Check this click is on a relevant element.\n    if (!select || !select.closest(SELECTORS.slotList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-slot-grade-item-updated');\n\n    const slotId = select.dataset.slotId;\n    const newGradeItemId = select.value ? select.value : null;\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const quizId = tableCell.closest('table').dataset.quizId;\n\n    updateSlotGradeItem(quizId, slotId, newGradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.gradeItemSelectId(slotId)).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    // Check this click is on a relevant element.\n    if (!link || !link.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n\n    if (link.dataset.actionAddFeedback) {\n        handleGradeItemAddFeedback(e);\n    }\n};\n\n/**\n * Handle clicks on the buttons.\n *\n * @param {Event} e click event.\n */\n\nconst handleButtonClick = (e) => {\n    if (e.target.closest(SELECTORS.addGradeItemButton)) {\n        handleAddGradeItemClick(e);\n    }\n    if (e.target.closest(SELECTORS.autoSetupButton)) {\n        handleAutoSetup(e);\n    }\n    if (e.target.closest(SELECTORS.resetAllButton)) {\n        handleResetAllClick(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' button.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainer(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    createGradeItem(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleAutoSetup = (e) => {\n    e.preventDefault();\n    const pending = new Pending('setup-quiz-grade-items');\n\n    const quizId = e.target.dataset.quizId;\n\n    autoSetupGradeItems(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.resetAllButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleResetAllClick = (e) => {\n    e.preventDefault();\n    const button = e.target;\n\n    Notification.deleteCancelPromise(\n        getString('gradeitemsremoveallconfirm', 'quiz'),\n        getString('gradeitemsremoveallmessage', 'quiz'),\n        getString('reset'),\n        button\n    ).then(() => reallyResetAll(button))\n    .catch(() => button.focus());\n};\n\n/**\n * Really reset all if the confirmation is OKed.\n *\n * @param {HTMLElement} button the reset button.\n */\nconst reallyResetAll = (button) => {\n    const pending = new Pending('reset-quiz-grading');\n    addIconToContainer(button.parentNode, pending);\n\n    const quizId = button.dataset.quizId;\n\n    let methodCalls = [];\n\n    // Call to clear any assignments of grade items to slots (if required).\n    const slotResets = [...document.querySelectorAll(SELECTORS.gradeItemSelect)].map(\n            (select) => ({\n                id: select.dataset.slotId,\n                quizgradeitemid: 0,\n            }));\n    if (slotResets.length) {\n        methodCalls.push({\n            methodname: 'mod_quiz_update_slots',\n            args: {\n                quizid: quizId,\n                slots: slotResets\n            }\n        });\n    }\n\n    // Request to delete all the grade items.\n    methodCalls.push({\n        methodname: 'mod_quiz_delete_grade_items',\n        args: {\n            quizid: quizId,\n            quizgradeitems: [...document.querySelectorAll(SELECTORS.gradeItemTr)].map((tr) => {\n                return {id: tr.dataset.quizGradeItemId};\n            })\n        }\n    });\n\n    callServicesAndReturnRenderingData(methodCalls)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    document.body.addEventListener('click', handleGradeItemClick);\n    document.body.addEventListener('keydown', handleGradeItemKeyDown);\n    document.body.addEventListener('keyup', handleGradeItemKeyUp);\n    document.body.addEventListener('focusout', handleGradeItemFocusOut);\n\n    document.body.addEventListener('click', handleButtonClick);\n\n    document.body.addEventListener('change', handleSlotGradeItemChanged);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["SELECTORS","id","modal","callServiceAndReturnRenderingData","methodCall","callServicesAndReturnRenderingData","methodCalls","push","methodname","args","quizid","Promise","all","then","results","JSON","parse","at","handleSubmitModal","e","preventDefault","currentTarget","dataset","action","hide","saveFeedback","async","console","log","formData","collectFormData","firstData","shift","options","formdata","stringify","parseInt","getBody","result","displayErrors","errors","isvalid","formatedData","data","unshift","saveOptions","gradeitemid","gradeItemId","response","Notification","exception","body","feedbackTextIndex","querySelectorAll","forEach","el","querySelector","_el$querySelector","_el$querySelector$dat","fieldtype","inputBoundary","errorText","name","feedback","closest","classList","add","setAttribute","innerText","remove","removeAttribute","feedbackEl","items","itemData","type","_el$querySelector2","_el$querySelector2$da","boundary","value","itemid","format","text","handleAddMoreFeedback","modalBody","contextId","target","after","order","length","fragment","Fragment","loadFragment","divider","done","html","js","insertAdjacentHTML","recalculateFeedbackIndex","eventAttached","gradeBoundaryEls","dividerButtonEls","key","wrapItem","label","afterindex","string","addEventListener","handleGradeItemDelete","pending","Pending","tableCell","tableRow","quizId","quizGradeItemId","nextItemToFocus","nextElementSibling","quizgradeitems","deleteGradeItem","reRenderPage","resolve","document","focus","catch","stopEditingGadeItem","editableSpan","innerHTML","oldContent","handleGradeItemKeyDown","keyCode","newName","updateGradeItem","editGradingPageData","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleSlotGradeItemChanged","select","slotId","newGradeItemId","slots","quizgradeitemid","updateSlotGradeItem","handleGradeItemClick","link","actionDelete","actionEdit","instructions","uniqueId","editLabel","rawName","inputElement","handleGradeItemEditStart","actionAddFeedback","Number","contextid","footerTemplate","Modal","create","title","footer","show","removeOnClose","large","templateContext","classes","setTimeout","getFooter","inputEl","disabled","addFeedback","input","handleGradeItemAddFeedback","handleButtonClick","handleAddGradeItemClick","handleAutoSetup","handleResetAllClick","parentNode","createGradeItem","autoSetupGradeItems","button","deleteCancelPromise","reallyResetAll","slotResets","map","tr"],"mappings":"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"}