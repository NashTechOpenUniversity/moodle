{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainer, addIconToContainerRemoveOnCompletion} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport * as Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport Fragment from 'core/fragment';\n\n/**\n * @type {Object} selectors used in this code.\n */\nconst SELECTORS = {\n    'addGradeItemButton': '#mod_quiz-add_grade_item',\n    'autoSetupButton': '#mod_quiz-grades_auto_setup',\n    'editingPageContents': '#edit_grading_page-contents',\n    'gradeItemList': 'table#mod_quiz-grade-item-list',\n    'gradeItemSelect': 'select[data-slot-id]',\n    'gradeItemSelectId': (id) => 'select#grade-item-choice-' + id,\n    'gradeItemTr': 'table#mod_quiz-grade-item-list tr[data-quiz-grade-item-id]',\n    'inplaceEditable': 'span.inplaceeditable',\n    'inplaceEditableOn': 'span.inplaceeditable.inplaceeditingon',\n    'resetAllButton': '#mod_quiz-grades_reset_all',\n    'slotList': 'table#mod_quiz-slot-list',\n    'updateGradeItemLink': (id) => 'tr[data-quiz-grade-item-id=\"' + id + '\"] .quickeditlink',\n};\n\nprefetchStrings('mod_quiz', [\n    'overallfeedback_for',\n    'insertfeedbackbefore',\n    'editoverallfeedback',\n    'overallfeedback1range',\n]);\n\nlet totalEditor = {};\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst createGradeItem = (\n    quizId,\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: ''}],\n    }\n});\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to update.\n * @param {String} newName the new name to set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateGradeItem = (\n    quizId,\n    gradeItemId,\n    newName\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n});\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to delete.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst deleteGradeItem = (\n    quizId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to update the quiz grade item used by a slot.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} slotId id of the slot to update.\n * @param {Number|null} gradeItemId new grade item ot set, or null to un-set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateSlotGradeItem = (\n    quizId,\n    slotId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_slots',\n    args: {\n        quizid: quizId,\n        slots: [{id: slotId, quizgradeitemid: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to setup one grade item for each quiz section.\n *\n * @param {Number} quizId id of the quiz to update.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst autoSetupGradeItems = (\n    quizId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_item_per_section',\n    args: {\n        quizid: quizId\n    }\n});\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object} methodCall a web service call to pass to fetchMany. Must include methodCall.args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServiceAndReturnRenderingData = (methodCall) => callServicesAndReturnRenderingData([methodCall]);\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object[]} methodCalls web service calls to pass to fetchMany. Must include methodCalls[0].args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServicesAndReturnRenderingData = (methodCalls) => {\n    methodCalls.push({\n            methodname: 'mod_quiz_get_edit_grading_page_data',\n            args: {\n                quizid: methodCalls[0].args.quizid,\n            }\n        });\n    return Promise.all(fetchMany(methodCalls))\n    .then(results => JSON.parse(results.at(-1)));\n};\n\n/**\n * A function to handle the event of adding overall feedback for each grade item.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemAddFeedback = async(e) => {\n    e.preventDefault();\n    const pending = new Pending('add-overall-feedback');\n    const tableCell = e.target.closest('td');\n    const tableRow = tableCell.closest('tr');\n    const contextId = Number(tableRow.closest('table').dataset.contextId);\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n    // Find the feedback detail row to show the feedback form.\n    const feedbackDetailRow = document.querySelector(SELECTORS.gradeItemList + ' #overall-feedback-detail-' + gradeItemId);\n    if (!feedbackDetailRow) {\n        return;\n    }\n    // In case the feedback detail row is still hidden, we need to show it.\n    if (!feedbackDetailRow.classList.contains('show')) {\n        // Trigger the expand button.\n        tableRow.querySelector('th span.inplaceeditable a.view-detail').click();\n    }\n    // Hide the overall feedback detail.\n    feedbackDetailRow.querySelector('.wrap-sub-table .wrap-overallfeedback-detail').classList.add('d-none');\n    // Show the loading icon while waiting for the feedback form to load.\n    addIconToContainerRemoveOnCompletion(feedbackDetailRow.querySelector('.wrap-sub-table'), pending);\n    // Load existing overall feedback based on the specific grade item ID.\n    // If no feedback exists, display a sample feedback with a boundary of 100%.\n    let totalFeedback = 0;\n    Fragment.loadFragment('mod_quiz', 'load_overall_feedback_data', contextId, {\n        quizId,\n        gradeItemId,\n    }).then(function(html, js) {\n        const feedbackFormEl = feedbackDetailRow.querySelector('.wrap-sub-table .wrap-overallfeedback-form');\n        // Set the overall feedback form data into the form.\n        feedbackFormEl.innerHTML = html;\n        // Then display it.\n        feedbackFormEl.classList.remove('d-none');\n        // Wait until the HTML is fully appended to the DOM before running the JavaScript code.\n        setTimeout(() => {\n            Templates.runTemplateJS(js);\n        }, 500);\n        // Add event for the divider.\n        // After the template loads, events need to be added to all dividers to allow users to add more overall feedback.\n        feedbackDetailRow\n            .querySelector('.wrap-sub-table')\n            .querySelectorAll('.divider button.feedbackadd-button')\n            .forEach(addFeedback => {\n                totalFeedback++;\n                // Set a flag to mark that the event has already been attached.\n                addFeedback.dataset.eventAttached = 'true';\n                addFeedback.addEventListener('click', e => {\n                    e.preventDefault();\n                    handleAddMoreFeedback(e, feedbackFormEl, contextId);\n                });\n            });\n\n        // We need to store the total editor for each grade item. This is necessary to create a unique ID for the editor.\n        totalEditor[gradeItemId] = totalFeedback;\n\n        // Handle footer button.\n        feedbackDetailRow.querySelectorAll('.overallfeedback-footer input')\n            .forEach(input => {\n                // Add event to handle footer buttons.\n                input.addEventListener('click', handleSubmitForm);\n                // Enable the cancel and save buttons.\n                input.removeAttribute('disabled');\n\n            });\n\n        // Add event for the delete feedback button.\n        feedbackDetailRow.querySelectorAll('button[name=\"delete-feedback\"]')\n            .forEach(button => {\n                // Need to set a flag for each button to indicate if an event is already set.\n                button.dataset.deleteEventAttached = 'true';\n                button.addEventListener(\"click\", handleDeleteFeedback);\n            });\n\n        pending.resolve();\n        return true;\n    }).catch(Notification.exception);\n};\n\n/**\n * A function to handle events when the user tries to click on the remove button in a form.\n *\n * @param {Event} e click event.\n */\nconst handleDeleteFeedback = e => {\n    const feedbackElement = e.currentTarget.closest('[data-groupname=\"gradeitem-feedback\"]');\n    const overallFeedbackWrapper = feedbackElement.closest('.wrap-overallfeedback-form');\n    const after = Number(feedbackElement.nextElementSibling.querySelector('button.feedbackadd-button').dataset.after);\n    // Remove boundary.\n    feedbackElement.previousElementSibling.remove();\n    // Remove divider element.\n    feedbackElement.nextElementSibling.remove();\n    // Remove feedback editor.\n    feedbackElement.remove();\n    // Calculate feedback index again.\n    recalculateFeedbackIndex(\n        overallFeedbackWrapper,\n        after,\n        Number(document.querySelector(SELECTORS.gradeItemList).dataset.contextId)\n    );\n};\n\n/**\n * A function to handle events when the user tries to click on the save or cancel button in a form.\n *\n * @param {Event} e click event.\n */\nconst handleSubmitForm = (e) => {\n    e.preventDefault();\n    const target = e.currentTarget;\n    const action = target.dataset.action;\n    const gradeItemId = parseInt(target.closest('div[data-gradeitem-id]').dataset.gradeitemId);\n    switch (action) {\n        case 'cancel':\n            // Hide the overall feedback form and display the feedback detail section.\n            target.closest('.wrap-sub-table')\n                ?.querySelector('.wrap-overallfeedback-form').classList.add('d-none');\n            target.closest('.wrap-sub-table')\n                ?.querySelector('.wrap-overallfeedback-detail').classList.remove('d-none');\n            // Collapse the overall feedback section.\n            toggleFeedbackDetailElements(gradeItemId, false);\n            break;\n        case 'save':\n            // Validate and then save the feedback.\n            saveFeedback(gradeItemId);\n            break;\n        default:\n            break;\n    }\n};\n\n/**\n * Collapse/Expand the overall feedback detail section.\n *\n * @param {Number} gradeItemID The grade item ID used to identify the area for the required action.\n * @param {Boolean} status Set to True to expand the section or False to collapse it.\n */\nconst toggleFeedbackDetailElements = (gradeItemID, status) => {\n    // Check if the feedback section already matches the requested status.\n    // For example, if the section is already expanded and the request is True (to expand), no action is needed.\n    if (!document.getElementById('overall-feedback-detail-' + gradeItemID).classList.contains('show') === status) {\n        // If the current status does not match the requested status, trigger action.\n        document.querySelector(\n            SELECTORS.gradeItemList + ` tr[data-quiz-grade-item-id=\"${gradeItemID}\"] > th a.view-detail`)?.click();\n    }\n};\n\n/**\n * Toggle the status of the footer buttons.\n *\n * @param {Number} gradeItemId Grade item id for feedback.\n * @param {Boolean} status True indicates that the button is disabled.\n */\nconst updateStatusFooterButton = (gradeItemId, status) => {\n    document.getElementById('overall-feedback-detail-' + gradeItemId)\n        .querySelectorAll('.overallfeedback-footer input')\n        .forEach(inputEl => {\n            inputEl.disabled = status;\n        });\n};\n\n/**\n * Validate the form data and save the feedback if it's valid.\n *\n * @param {Number} gradeItemId The grade item id for the feedback.\n */\nconst saveFeedback = async(gradeItemId) => {\n    // Browse through every element in the form and collect them into an object.\n    const formData = collectFormData(gradeItemId);\n    updateStatusFooterButton(gradeItemId, true);\n    const options = {\n        methodname: 'mod_quiz_save_overall_feedback_per_grade_item',\n        args: {\n            formdata: JSON.stringify(formData),\n            quizid: parseInt(document.querySelector(SELECTORS.gradeItemList).dataset.quizId),\n            gradeitemid: gradeItemId,\n        },\n    };\n\n    try {\n        // Validate form data and save it.\n        const result = await fetchMany([options])[0];\n        // Toggle error messages.\n        const errors = JSON.parse(result.errors);\n        displayErrors(gradeItemId, errors);\n        // If the form data is valid.\n        if (errors.length === 0) {\n            // Update icon and title for the menu-item.\n            // Since the page does not reload, we must change it manually.\n            const gradeItemRow = document.querySelector(SELECTORS.gradeItemList +\n                ` tr[data-quiz-grade-item-id=\"${gradeItemId}\"]`);\n            const addOverallFeedbackMenu = gradeItemRow\n                .querySelector('.moodle-actionmenu a.dropdown-item[data-action-add-feedback]');\n            const {key, title, titleLevelFeedback} = await getIconFeedback(parseInt(result.total));\n            const icon = await Templates.renderPix(key, 'core', title);\n            addOverallFeedbackMenu.innerHTML = icon + title;\n            gradeItemRow.querySelector('td.total-overallfeedback').innerText = titleLevelFeedback;\n            if (parseInt(result.total) === 0) {\n                // Since there is no existing feedback for this grade item ID,\n                // we need to collapse the feedback detail element if it is expanded.\n                toggleFeedbackDetailElements(gradeItemId, false);\n                // The user has removed all feedback, so the expanded icon will be hidden.\n                gradeItemRow.querySelector(SELECTORS.inplaceEditable)\n                    ?.querySelector('a.view-detail:not(.invisible)')?.classList?.add('invisible');\n            } else {\n                // Feedback exists, so we need to display the expanded icon.\n                gradeItemRow.querySelector(SELECTORS.inplaceEditable)\n                    ?.querySelector('a.invisible')?.classList?.remove('invisible');\n                // Load detail feedback.\n                const pending = new Pending('updating-feedback-detail');\n                const feedbackWrapElement = document.getElementById('overall-feedback-detail-' + gradeItemId);\n                addIconToContainerRemoveOnCompletion(feedbackWrapElement.querySelector('.wrap-sub-table'), pending);\n                Fragment.loadFragment('mod_quiz', 'load_overall_feedback_detail',\n                    Number(document.querySelector(SELECTORS.gradeItemList).dataset.contextId),\n                    {\n                        quizId: parseInt(document.querySelector(SELECTORS.gradeItemList).dataset.quizId),\n                        gradeItemId,\n                    }).then(function(html) {\n                    feedbackWrapElement.querySelector('.wrap-overallfeedback-detail').innerHTML = html;\n                    // Hide the overall feedback form and display the feedback detail section.\n                    feedbackWrapElement.querySelector('.wrap-overallfeedback-form').classList.add('d-none');\n                    // To prevent any unnecessary browser alerts during refresh, we need to destroy the feedback form.\n                    feedbackWrapElement.querySelector('.wrap-overallfeedback-form').innerHTML = '';\n                    // Display the detailed feedback.\n                    feedbackWrapElement.querySelector('.wrap-overallfeedback-detail').classList.remove('d-none');\n                    pending.resolve();\n                    return true;\n                }).catch(Notification.exception);\n            }\n        }\n        updateStatusFooterButton(gradeItemId, false);\n    } catch (e) {\n        updateStatusFooterButton(gradeItemId, false);\n        Notification.exception(e);\n    }\n};\n\n/**\n * Prepare the type icon and title before rendering the icon for updating menu items in the overall feedback dropdown list.\n *\n * @param {Number} totalFeedback Number of feedback entries in the grade item.\n * @returns {Object} Return type of icon and title.\n */\nconst getIconFeedback = async(totalFeedback) => {\n    if (totalFeedback > 0) {\n        return {\n            key: 't/edit',\n            title: await getString('editoverallfeedback', 'quiz'),\n            titleLevelFeedback: totalFeedback === 1 ?\n                await getString('overallfeedback1range', 'quiz', totalFeedback) :\n                await getString('overallfeedbacknranges', 'quiz', totalFeedback)\n        };\n    }\n    return {\n        key: 't/add',\n        title: await getString('addoverallfeedback', 'quiz'),\n        titleLevelFeedback: '-'\n    };\n};\n\n\n/**\n * Display error messages for every form element that exists in the errors object.\n *\n * @param {Number} gradeItemId The grade item id for feedback.\n * @param {Object} errors Errors object.\n */\nconst displayErrors = (gradeItemId, errors) => {\n    const feedbackForm = document.getElementById('overall-feedback-detail-' + gradeItemId);\n    let feedbackTextIndex = 0;\n\n    // We need to go through all the input elements to display error messages\n    // for invalid inputs and clear error messages for valid ones.\n    feedbackForm.querySelectorAll('form .fitem').forEach(el => {\n        // Check the container type. It can be static, text (boundaries), or editor (feedback).\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        switch (type) {\n            case 'text': {\n                const inputBoundary = el.querySelector('input[name^=\"feedbackboundaries\"]');\n                const errorText = errors[inputBoundary.name];\n                const feedback = inputBoundary.closest('.felement').querySelector('.invalid-feedback');\n                if (errorText) {\n                    // If an error occurs with the feedback boundaries input, we need to display an error message.\n                    inputBoundary.classList.add('is-invalid');\n                    inputBoundary.setAttribute('autofocus', true);\n                    feedback.classList.add('d-block');\n                    feedback.innerText = errorText;\n                    inputBoundary.setAttribute('aria-describedby', feedback.id);\n                } else {\n                    // If the feedback boundaries input is valid, we need to remove the error message.\n                    inputBoundary.classList.remove('is-invalid');\n                    inputBoundary.removeAttribute('autofocus');\n                    feedback.classList.remove('d-block');\n                    feedback.innerText = '';\n                }\n            }\n                break;\n            case 'editor': {\n                const textAreaFeedback = el.querySelector('textarea[name^=\"feedbacktext\"]');\n                // Skip the first editor when the boundary is 100%.\n                if (textAreaFeedback.id === 'id_feedbacktext_0_text') {\n                    break;\n                }\n                const errorText = errors[`feedbacktext[${feedbackTextIndex}]`];\n                const feedbackEl = el.querySelector('.invalid-feedback');\n                if (errorText) {\n                    feedbackEl.innerText = errorText;\n                    feedbackEl.classList.add('d-block');\n                } else {\n                    feedbackEl.innerText = '';\n                    feedbackEl.classList.remove('d-block');\n                }\n                feedbackTextIndex++;\n            }\n                break;\n            default:\n                break;\n        }\n    });\n};\n\n/**\n * Collect form data in overall feedback form.\n *\n * @param {Number} gradeItemId Grade item id for feedback.\n * @return {Array} Form data array.\n */\nconst collectFormData = (gradeItemId) => {\n    const formData = [];\n    let itemData = {};\n    // Since every time a user adds more feedback, a new form is appended to the form,\n    // leading to more than one form existing in the form, we need to query all the forms in the form\n    // and loop through them to collect the form data.\n    const forms = document.getElementById('overall-feedback-detail-' + gradeItemId)\n        .querySelectorAll('.wrap-overallfeedback-form form');\n    forms.forEach(form => {\n        [...(new FormData(form)).entries()].forEach((arr) => {\n            // Retrieve the name and value of form inputs.\n            // Only collect feedback boundaries and feedback text.\n            const [key, value] = arr;\n            // Since the name of the boundaries input follows the format like feedbackboundaries[0],\n            // we need to use regex to detect it.\n            if (/^feedbackboundaries/.test(key)) {\n                itemData.boundary = value.trim();\n            }\n            // The feedback differs from the boundaries when it is a text editor,\n            // so we need to collect the text, format type, and item ID.\n            if (/^feedbacktext/.test(key)) {\n                // The name of the editor follows the format feedbacktext[1][40][text], feedbacktext[1][40][format],\n                // feedbacktext[1][40][itemid].\n                // This regex will return an array containing 3 items like [1, 40, \"[text]\"].\n                // Then, remove the characters [ and ] from the last item to retrieve the editor type.\n                const type = key.match(/\\[(.*?)]/g).pop().slice(1, -1);\n                if (!itemData.feedback) {\n                    itemData.feedback = {};\n                }\n                itemData.feedback[type] = value.trim();\n            }\n            if (Object.keys(itemData.feedback ?? {}).length === 3) {\n                // By default, the first boundary value is 100%, and it's only a label so that we can't get it in form data,\n                // so we need to set a default value (it's just sample data. It doesn't need to be true grade data.)\n                // for the first boundary data.\n                itemData.boundary = itemData.boundary ?? \"100%\";\n                formData.push({...itemData});\n                itemData = {};\n            }\n        });\n    });\n\n    return formData;\n};\n\n/**\n * A function to handle adding more feedback in the overall feedback form.\n *\n * @param {Event} e click event.\n * @param {HTMLElement} overallFeedbackWrapper The wrapper element for the form.\n * @param {Number} contextId Context id number.\n */\nconst handleAddMoreFeedback = async(e, overallFeedbackWrapper, contextId) => {\n    const {after} = e.currentTarget.dataset;\n    const gradeItemId = parseInt(overallFeedbackWrapper.closest('[data-gradeitem-id]').dataset.gradeitemId);\n    // Load a new feedback form and append it to the current form.\n    // Since there is no alternative method available, we will use the load fragment approach to load the new form.\n    Fragment.loadFragment('mod_quiz', 'load_overall_feedback_form', contextId, {\n        after,\n        // The \"no\" parameter represents the total number of editors that currently exist for this grade item.\n        // This is necessary to generate a unique ID for creating a new editor to prevent duplication,\n        // the total count of editors is used as a unique identifier for the new editor.\n        no: totalEditor[gradeItemId],\n        gradeitemid: gradeItemId,\n    }).then(function(html, js) {\n         // Append the new editor to the current form, placing it directly after the divider element.\n        overallFeedbackWrapper.querySelector(`.divider button[data-after=\"${after}\"]`)\n            .closest('.divider').insertAdjacentHTML('afterend', html);\n        Templates.runTemplateJS(js);\n        // Need to increase the total editor exist in this grade item to help make a unique id for the next editor.\n        totalEditor[gradeItemId]++;\n        recalculateFeedbackIndex(overallFeedbackWrapper, after, contextId);\n        return true;\n    }).catch(Notification.exception);\n};\n\n/**\n * Every time a new feedback is added to the form, we need to calculate the order number and update it for all elements.\n *\n * @param {HTMLElement} overallFeedbackWrapper The wrapper element for the form.\n * @param {Number} after The order number used to detect the position to add new feedback.\n * @param {Number} contextId Context id number.\n */\nconst recalculateFeedbackIndex = (overallFeedbackWrapper, after, contextId) => {\n    const gradeBoundaryEls = overallFeedbackWrapper.querySelectorAll('input[name^=\"feedbackboundaries\"]');\n    const dividerButtonEls = overallFeedbackWrapper.querySelectorAll('.divider button');\n    const deleteButtonEls = overallFeedbackWrapper.querySelectorAll('button[name=\"delete-feedback\"]');\n    gradeBoundaryEls.forEach((el, key) => {\n        if (key >= after) {\n            // Re-update id or label for every element.\n            const wrapItem = el.closest('.fitem');\n            const label = wrapItem.querySelector('label[id^=\"id_feedbackboundaries_\"]');\n            const inputBoundary = wrapItem.querySelector('input[name^=\"feedbackboundaries\"]');\n            wrapItem.id = 'fitem_id_feedbackboundaries_' + key;\n            label.id = `id_feedbackboundaries_${key}_label`;\n            label.setAttribute('for', `id_feedbackboundaries_${key}`);\n            inputBoundary.id = 'id_feedbackboundaries_' + key;\n            inputBoundary.name = `feedbackboundaries[${key}]`;\n            wrapItem.querySelector('.invalid-feedback').id = 'id_error_feedbackboundaries_' + key;\n        }\n    });\n\n    // Re-update devider.\n    dividerButtonEls.forEach((el, key) => {\n        el.dataset.after = key;\n        getString('insertfeedbackbefore', 'mod_quiz', {afterindex: key}).then(string => {\n            el.setAttribute('aria-label', string);\n            return true;\n        }).catch(() => {\n            return false;\n        });\n        // Add event for the new divider that was just loaded.\n        if (el.dataset.eventAttached === 'false') {\n            // Set a flag if the button already has an event added.\n            el.dataset.eventAttached = 'true';\n            el.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, overallFeedbackWrapper, contextId);\n            });\n        }\n    });\n\n    // Add event for delete button just append to form.\n    deleteButtonEls.forEach((el) => {\n        // Add event for the new divider that was just loaded.\n        if (el.dataset?.deleteEventAttached === undefined) {\n            // Set a flag if the button already has an event added.\n            el.dataset.deleteEventAttached = 'true';\n            el.addEventListener('click', e => {\n                e.preventDefault();\n                handleDeleteFeedback(e);\n            });\n        }\n    });\n};\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    let nextItemToFocus;\n    if (tableRow.nextElementSibling) {\n        nextItemToFocus = SELECTORS.updateGradeItemLink(tableRow.nextElementSibling.dataset.quizGradeItemId);\n    } else {\n        nextItemToFocus = SELECTORS.addGradeItemButton;\n    }\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(nextItemToFocus)?.focus();\n            return true;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditable);\n\n    document.querySelectorAll(SELECTORS.inplaceEditableOn).forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"visually-hidden\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control w-100\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainer(tableCell);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.updateGradeItemLink(gradeItemId)).focus({'focusVisible': true});\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the contents of the page with the page re-rendered from the provided data, once that promise resolves.\n *\n * @param {Object} editGradingPageData the template context data required to re-render the page.\n * @returns {Promise<void>} a promise that will resolve when the page is updated.\n */\nconst reRenderPage = (editGradingPageData) =>\n    Templates.render('mod_quiz/edit_grading_page', editGradingPageData)\n        .then((html, js) => Templates.replaceNode(document.querySelector(SELECTORS.editingPageContents), html, js || ''));\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle when the selected grade item for a slot is changed.\n *\n * @param {Event} e event.\n */\nconst handleSlotGradeItemChanged = (e) => {\n    const select = e.target.closest(SELECTORS.gradeItemSelect);\n\n    // Check this click is on a relevant element.\n    if (!select || !select.closest(SELECTORS.slotList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-slot-grade-item-updated');\n\n    const slotId = select.dataset.slotId;\n    const newGradeItemId = select.value ? select.value : null;\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const quizId = tableCell.closest('table').dataset.quizId;\n\n    updateSlotGradeItem(quizId, slotId, newGradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.gradeItemSelectId(slotId)).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    // Check this click is on a relevant element.\n    if (!link || !link.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n\n    if (link.dataset.actionAddFeedback) {\n        handleGradeItemAddFeedback(e);\n    }\n\n    if (link.dataset.actionViewFeedback) {\n        handleGradeItemViewFeedback(e);\n    }\n};\n\n/**\n * Handle clicks on view overall feedback detail.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemViewFeedback = (e) => {\n    e.preventDefault();\n    const target = e.target.closest('a');\n    const action = target.dataset.actionViewFeedback === \"0\";\n    toggleFeedbackDetail(target, action);\n};\n\n/**\n * Toggle to show or hide the expand/collapse icon for the overall feedback details.\n *\n * @param {HTMLElement} target The target element to toggle the class.\n * @param {Boolean} action The action to trigger: true for expand and false for collapse.\n */\nconst toggleFeedbackDetail = (target, action) => {\n    const targetClass = action ? '.collapsed-icon' : '.expanded-icon';\n    target.querySelector(`span.icon:not(${targetClass})`).classList.add('d-none');\n    target.querySelector(`${targetClass}`).classList.remove('d-none');\n    target.dataset.actionViewFeedback = action ? '1' : '0';\n};\n\n/**\n * Handle clicks on the buttons.\n *\n * @param {Event} e click event.\n */\nconst handleButtonClick = (e) => {\n    if (e.target.closest(SELECTORS.addGradeItemButton)) {\n        handleAddGradeItemClick(e);\n    }\n    if (e.target.closest(SELECTORS.autoSetupButton)) {\n        handleAutoSetup(e);\n    }\n    if (e.target.closest(SELECTORS.resetAllButton)) {\n        handleResetAllClick(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' button.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainer(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    createGradeItem(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleAutoSetup = (e) => {\n    e.preventDefault();\n    const pending = new Pending('setup-quiz-grade-items');\n\n    const quizId = e.target.dataset.quizId;\n\n    autoSetupGradeItems(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.resetAllButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleResetAllClick = (e) => {\n    e.preventDefault();\n    const button = e.target;\n\n    Notification.deleteCancelPromise(\n        getString('gradeitemsremoveallconfirm', 'quiz'),\n        getString('gradeitemsremoveallmessage', 'quiz'),\n        getString('reset'),\n        button\n    ).then(() => reallyResetAll(button))\n    .catch(() => button.focus());\n};\n\n/**\n * Really reset all if the confirmation is OKed.\n *\n * @param {HTMLElement} button the reset button.\n */\nconst reallyResetAll = (button) => {\n    const pending = new Pending('reset-quiz-grading');\n    addIconToContainer(button.parentNode, pending);\n\n    const quizId = button.dataset.quizId;\n\n    let methodCalls = [];\n\n    // Call to clear any assignments of grade items to slots (if required).\n    const slotResets = [...document.querySelectorAll(SELECTORS.gradeItemSelect)].map(\n            (select) => ({\n                id: select.dataset.slotId,\n                quizgradeitemid: 0,\n            }));\n    if (slotResets.length) {\n        methodCalls.push({\n            methodname: 'mod_quiz_update_slots',\n            args: {\n                quizid: quizId,\n                slots: slotResets\n            }\n        });\n    }\n\n    // Request to delete all the grade items.\n    methodCalls.push({\n        methodname: 'mod_quiz_delete_grade_items',\n        args: {\n            quizid: quizId,\n            quizgradeitems: [...document.querySelectorAll(SELECTORS.gradeItemTr)].map((tr) => {\n                return {id: tr.dataset.quizGradeItemId};\n            })\n        }\n    });\n\n    callServicesAndReturnRenderingData(methodCalls)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    document.body.addEventListener('click', handleGradeItemClick);\n    document.body.addEventListener('keydown', handleGradeItemKeyDown);\n    document.body.addEventListener('keyup', handleGradeItemKeyUp);\n    document.body.addEventListener('focusout', handleGradeItemFocusOut);\n\n    document.body.addEventListener('click', handleButtonClick);\n\n    document.body.addEventListener('change', handleSlotGradeItemChanged);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["SELECTORS","id","totalEditor","callServiceAndReturnRenderingData","methodCall","callServicesAndReturnRenderingData","methodCalls","push","methodname","args","quizid","Promise","all","then","results","JSON","parse","at","handleDeleteFeedback","e","feedbackElement","currentTarget","closest","overallFeedbackWrapper","after","Number","nextElementSibling","querySelector","dataset","previousElementSibling","remove","recalculateFeedbackIndex","document","contextId","handleSubmitForm","preventDefault","target","action","gradeItemId","parseInt","gradeitemId","classList","add","toggleFeedbackDetailElements","saveFeedback","gradeItemID","status","getElementById","contains","click","updateStatusFooterButton","querySelectorAll","forEach","inputEl","disabled","async","formData","collectFormData","options","formdata","stringify","quizId","gradeitemid","result","errors","displayErrors","length","gradeItemRow","addOverallFeedbackMenu","key","title","titleLevelFeedback","getIconFeedback","total","icon","Templates","renderPix","innerHTML","innerText","pending","Pending","feedbackWrapElement","loadFragment","html","resolve","catch","Notification","exception","totalFeedback","feedbackForm","feedbackTextIndex","el","_el$querySelector","_el$querySelector$dat","fieldtype","inputBoundary","errorText","name","feedback","setAttribute","removeAttribute","feedbackEl","itemData","form","FormData","entries","arr","value","test","boundary","trim","type","match","pop","slice","Object","keys","handleAddMoreFeedback","no","js","insertAdjacentHTML","runTemplateJS","gradeBoundaryEls","dividerButtonEls","deleteButtonEls","wrapItem","label","afterindex","string","eventAttached","addEventListener","undefined","deleteEventAttached","handleGradeItemDelete","tableCell","tableRow","quizGradeItemId","nextItemToFocus","quizgradeitems","deleteGradeItem","reRenderPage","focus","stopEditingGadeItem","editableSpan","oldContent","handleGradeItemKeyDown","keyCode","newName","updateGradeItem","editGradingPageData","render","replaceNode","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleSlotGradeItemChanged","select","slotId","newGradeItemId","slots","quizgradeitemid","updateSlotGradeItem","handleGradeItemClick","link","actionDelete","actionEdit","instructions","uniqueId","editLabel","rawName","inputElement","handleGradeItemEditStart","actionAddFeedback","feedbackDetailRow","feedbackFormEl","setTimeout","addFeedback","input","button","handleGradeItemAddFeedback","actionViewFeedback","handleGradeItemViewFeedback","toggleFeedbackDetail","targetClass","handleButtonClick","handleAddGradeItemClick","handleAutoSetup","handleResetAllClick","parentNode","createGradeItem","autoSetupGradeItems","deleteCancelPromise","reallyResetAll","slotResets","map","tr","body"],"mappings":"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"}