{"version":3,"file":"mutations.min.js","sources":["../../src/dragdrop/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for Mutations library.\n *\n * @module    mod_quiz/dragdrop/mutations\n * @copyright 2024 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {SELECTORS} from 'mod_quiz/dragdrop/selectors';\nimport {slot, util} from 'mod_quiz/quiz_utils';\nimport {initResourceToolbox} from 'mod_quiz/quiz_toolboxes';\n\n/**\n * Mutations library for mod_quiz_dragdrop.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n\n    /**\n     * Moves a question to a new slot.\n     *\n     * @param {*} stateManager StateManager instance\n     * @param {Object} dragData Id of the column to move\n     * @param {Element} dropZoneNode Id ofthe column before (0 means to insert at the left of the board)\n     */\n    async moveQuestion(stateManager, dragData, dropZoneNode) {\n        const goingUp = dragData.slotorder > dropZoneNode.dataset.slotorder;\n        // We want to update the front-end UI first so that we can get the correct previous slot and previous page.\n        this.processUpdates(stateManager, dropZoneNode, dragData, goingUp);\n        const dragNode = document.getElementById(dragData.id);\n        let previousSlot = slot.getPrevious(dragNode, SELECTORS.SLOT_SELECTOR);\n        let previousPage = slot.getPrevious(dragNode, SELECTORS.PAGE_SELECTOR);\n\n        if (previousSlot) {\n            previousSlot = util.getNumber(previousSlot.id);\n        } else {\n            previousSlot = 0;\n        }\n        if (previousPage) {\n            previousPage = util.getNumber(previousPage.id);\n        } else {\n            previousPage = 0;\n        }\n        const result = await this._moveQuestionToSlot(dragData.quizid, util.getNumber(dragData.id),\n            util.getNumber(dragNode.closest(SELECTORS.MAIN_SECTION).id), previousSlot, previousPage);\n        if (result.visible) {\n            initResourceToolbox(dragData.courseid, dragData.quizid, false).reorganiseEditPage();\n        }\n    }\n\n    /**\n     * Move question to a new slot webservice.\n     *\n     * @param {Number} quizid\n     * @param {Number} slotid\n     * @param {Number} sectionid\n     * @param {Number} previousslotid\n     * @param {Number} page\n     * @returns {Promise<*>}\n     * @private\n     */\n    async _moveQuestionToSlot(quizid, slotid, sectionid, previousslotid, page) {\n        return Ajax.call([{\n            methodname: 'mod_quiz_move_slot',\n            args: {\n                quizid: quizid,\n                id: slotid,\n                previousid: previousslotid,\n                sectionid: sectionid,\n                page: page,\n            },\n        }])[0];\n    }\n\n    /**\n     *\n     * Update state object.\n     *\n     * @param {*} stateManager\n     * @param {HTMLElement} dropZoneNode\n     * @param {Object} dragData\n     * @param {Boolean} goingup\n     */\n    async processUpdates(stateManager, dropZoneNode , dragData, goingup) {\n        const updateUI = {\n            name: 'question',\n            action: 'put',\n            fields: {\n                id: dragData.id,\n                ismove: true,\n                goingup: goingup,\n                dropzoneslotorder: dropZoneNode.dataset.slotorder,\n                dragslotoder: dragData.slotorder,\n                previousslotid: dropZoneNode.id,\n            }\n        };\n        // The first update to change state object to update the UI in the front-end.\n        stateManager.processUpdates([updateUI]);\n        const revertIsMoveState = {\n            name: 'question',\n            action: 'put',\n            fields: {\n                id: dragData.id,\n                ismove: false,\n            }\n        };\n        // The second update just revert back the ismove state.\n        stateManager.processUpdates([revertIsMoveState]);\n    }\n}"],"names":["stateManager","dragData","dropZoneNode","goingUp","slotorder","dataset","processUpdates","dragNode","document","getElementById","id","previousSlot","slot","getPrevious","SELECTORS","SLOT_SELECTOR","previousPage","PAGE_SELECTOR","util","getNumber","this","_moveQuestionToSlot","quizid","closest","MAIN_SECTION","visible","courseid","reorganiseEditPage","slotid","sectionid","previousslotid","page","Ajax","call","methodname","args","previousid","goingup","updateUI","name","action","fields","ismove","dropzoneslotorder","dragslotoder","revertIsMoveState"],"mappings":";;;;;;;0LAyCuBA,aAAcC,SAAUC,oBACjCC,QAAUF,SAASG,UAAYF,aAAaG,QAAQD,eAErDE,eAAeN,aAAcE,aAAcD,SAAUE,eACpDI,SAAWC,SAASC,eAAeR,SAASS,QAC9CC,aAAeC,iBAAKC,YAAYN,SAAUO,qBAAUC,eACpDC,aAAeJ,iBAAKC,YAAYN,SAAUO,qBAAUG,eAGpDN,aADAA,aACeO,iBAAKC,UAAUR,aAAaD,IAE5B,EAGfM,aADAA,aACeE,iBAAKC,UAAUH,aAAaN,IAE5B,SAEEU,KAAKC,oBAAoBpB,SAASqB,OAAQJ,iBAAKC,UAAUlB,SAASS,IACnFQ,iBAAKC,UAAUZ,SAASgB,QAAQT,qBAAUU,cAAcd,IAAKC,aAAcK,eACpES,iDACaxB,SAASyB,SAAUzB,SAASqB,QAAQ,GAAOK,+CAe7CL,OAAQM,OAAQC,UAAWC,eAAgBC,aAC1DC,cAAKC,KAAK,CAAC,CACdC,WAAY,qBACZC,KAAM,CACFb,OAAQA,OACRZ,GAAIkB,OACJQ,WAAYN,eACZD,UAAWA,UACXE,KAAMA,SAEV,wBAYa/B,aAAcE,aAAeD,SAAUoC,eAClDC,SAAW,CACbC,KAAM,WACNC,OAAQ,MACRC,OAAQ,CACJ/B,GAAIT,SAASS,GACbgC,QAAQ,EACRL,QAASA,QACTM,kBAAmBzC,aAAaG,QAAQD,UACxCwC,aAAc3C,SAASG,UACvB0B,eAAgB5B,aAAaQ,KAIrCV,aAAaM,eAAe,CAACgC,iBACvBO,kBAAoB,CACtBN,KAAM,WACNC,OAAQ,MACRC,OAAQ,CACJ/B,GAAIT,SAASS,GACbgC,QAAQ,IAIhB1C,aAAaM,eAAe,CAACuC"}