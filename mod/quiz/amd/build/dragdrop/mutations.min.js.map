{"version":3,"file":"mutations.min.js","sources":["../../src/dragdrop/mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Selectors from 'mod_quiz/dragdrop/selectors';\nimport {util} from 'mod_quiz/quiz_utils';\n\n/**\n * Mutations library for mod_quiz_dragdrop.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n\n    /**\n     * Moves a question to a new place.\n     *\n     * @param {*} stateManager StateManager instance\n     * @param {Object} dragData Id of the column to move\n     * @param {Element} dropZoneNode Id ofthe column before (0 means to insert at the left of the board)\n     */\n    async moveQuestion(stateManager, dragData, dropZoneNode) {\n        let previousPage;\n        let previousSlotId = 0;\n        let previousNode;\n        const goingUp = dragData.slotorder > dropZoneNode.dataset.slotorder;\n        if (goingUp) {\n            previousNode = dropZoneNode.previousSibling;\n        } else {\n            previousNode = dropZoneNode;\n        }\n\n        if (previousNode.id.includes('page')) {\n            previousPage = util.getNumber(previousNode.id);\n        } else {\n            previousPage = previousNode.dataset.page;\n            previousSlotId = util.getNumber(previousNode.id);\n        }\n\n        const result = await this._moveQuestionToSlot(dragData.quizid, util.getNumber(dragData.id),\n            util.getNumber(dropZoneNode.closest(Selectors.MAIN_SECTION).id), previousSlotId, previousPage);\n        this.processUpdates(stateManager, result, dropZoneNode, dragData, goingUp);\n    }\n\n    /**\n     * Move question to a new slot.\n     *\n     * @param {Number} quizid\n     * @param {Number} slotid\n     * @param {Number} sectionid\n     * @param {Number} previousslotid\n     * @param {Number} page\n     * @returns {Promise<*>}\n     * @private\n     */\n    async _moveQuestionToSlot(quizid, slotid, sectionid, previousslotid, page) {\n        return Ajax.call([{\n            methodname: 'mod_quiz_move_slot',\n            args: {\n                quizid: quizid,\n                id: slotid,\n                sectionid: sectionid,\n                previousid: previousslotid,\n                page: page,\n            },\n        }])[0];\n    }\n\n    /**\n     *\n     * Update state object.\n     *\n     * @param stateManager\n     * @param result\n     * @param dropZoneNode\n     * @param dragData\n     * @param goingup\n     */\n    async processUpdates(stateManager, result, dropZoneNode , dragData, goingup) {\n        if (result.visible) {\n            const updateUI = {\n                name: 'question',\n                action: 'put',\n                fields: {\n                    id: dragData.id,\n                    ismove: true,\n                    goingup: goingup,\n                    dropzoneslotorder: dropZoneNode.dataset.slotorder,\n                    dragslotoder: dragData.slotorder,\n                    previousslotid: dropZoneNode.id,\n                }\n            };\n            // The first update to change state object to update the UI in the front-end.\n            stateManager.processUpdates([updateUI]);\n            const revertIsMoveState = {\n                name: 'question',\n                action: 'put',\n                fields: {\n                    id: dragData.id,\n                    ismove: false,\n                }\n            };\n            // The second update just revert back the ismove state.\n            stateManager.processUpdates([revertIsMoveState]);\n\n        }\n    }\n}"],"names":["stateManager","dragData","dropZoneNode","previousPage","previousNode","previousSlotId","goingUp","slotorder","dataset","previousSibling","id","includes","util","getNumber","page","result","this","_moveQuestionToSlot","quizid","closest","Selectors","MAIN_SECTION","processUpdates","slotid","sectionid","previousslotid","Ajax","call","methodname","args","previousid","goingup","visible","updateUI","name","action","fields","ismove","dropzoneslotorder","dragslotoder","revertIsMoveState"],"mappings":"ucAiBuBA,aAAcC,SAAUC,kBACnCC,aAEAC,aADAC,eAAiB,QAEfC,QAAUL,SAASM,UAAYL,aAAaM,QAAQD,UAEtDH,aADAE,QACeJ,aAAaO,gBAEbP,aAGfE,aAAaM,GAAGC,SAAS,QACzBR,aAAeS,iBAAKC,UAAUT,aAAaM,KAE3CP,aAAeC,aAAaI,QAAQM,KACpCT,eAAiBO,iBAAKC,UAAUT,aAAaM,WAG3CK,aAAeC,KAAKC,oBAAoBhB,SAASiB,OAAQN,iBAAKC,UAAUZ,SAASS,IACnFE,iBAAKC,UAAUX,aAAaiB,QAAQC,mBAAUC,cAAcX,IAAKL,eAAgBF,mBAChFmB,eAAetB,aAAce,OAAQb,aAAcD,SAAUK,mCAc5CY,OAAQK,OAAQC,UAAWC,eAAgBX,aAC1DY,cAAKC,KAAK,CAAC,CACdC,WAAY,qBACZC,KAAM,CACFX,OAAQA,OACRR,GAAIa,OACJC,UAAWA,UACXM,WAAYL,eACZX,KAAMA,SAEV,wBAaad,aAAce,OAAQb,aAAeD,SAAU8B,YAC5DhB,OAAOiB,QAAS,OACVC,SAAW,CACbC,KAAM,WACNC,OAAQ,MACRC,OAAQ,CACJ1B,GAAIT,SAASS,GACb2B,QAAQ,EACRN,QAASA,QACTO,kBAAmBpC,aAAaM,QAAQD,UACxCgC,aAActC,SAASM,UACvBkB,eAAgBvB,aAAaQ,KAIrCV,aAAasB,eAAe,CAACW,iBACvBO,kBAAoB,CACtBN,KAAM,WACNC,OAAQ,MACRC,OAAQ,CACJ1B,GAAIT,SAASS,GACb2B,QAAQ,IAIhBrC,aAAasB,eAAe,CAACkB"}