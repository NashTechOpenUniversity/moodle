{"version":3,"file":"dragdrop_utils.min.js","sources":["../../src/dragdrop/dragdrop_utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for util function for drag drop.\n *\n * @module    mod_quiz/dragdrop/dragdrop_utils\n * @copyright 2024 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport {get_string as getString} from 'core/str';\nimport Prefetch from 'core/prefetch';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\n\nPrefetch.prefetchStrings('quiz', ['dragtoafter', 'movecontent']);\nconst dragdropUtils = {\n\n    /**\n     * Builds a list element containing draggable items with drop targets.\n     *\n     * @async\n     * @param {NodeList} dropTargetElement - A list of all target elements where the item can be dropped.\n     * @param {number} currentPosition - The index of the current element being dragged.\n     *\n     * @returns {HTMLElement} The generated list of draggable items to display in the modal.\n     */\n    buildListItem: async function(dropTargetElement, currentPosition) {\n        const ul = document.createElement('ul');\n        ul.setAttribute('class', 'dragdrop-keyboard-drag');\n        const utils = this;\n        // Create an array of promises to ensure all async tasks finish before continuing\n        const promises = [];\n        dropTargetElement.forEach((e, index) => {\n            if (index !== currentPosition && currentPosition !== index + 1) {\n                const promise = (async function() {\n                    const listLink = document.createElement('a');\n                    const listItem = document.createElement('li');\n                    listLink.textContent = await getString('dragtoafter', 'mod_quiz', utils.getNodeText(e));\n                    listLink.setAttribute('role', 'button');\n                    listLink.setAttribute('tabindex', '0');\n                    listLink.setAttribute('data-dropzoneid', e.id);\n\n                    listItem.appendChild(listLink);\n                    ul.appendChild(listItem);\n                })();\n                promises.push(promise);\n            } else {\n                ul.setAttribute('data-dragitemid', e.id);\n            }\n        });\n\n        await Promise.all(promises);\n        return ul;\n    },\n\n    /**\n     * Displays a modal dialog that allows the user to select a drop target for the dragged item.\n     *\n     * @async\n     * @param {HTMLElement} listItem - The generated list of draggable items to display in the modal.\n     * @param {Event} e - The event object from the drag-and-drop action.\n     * @param {Array} dragDropElementList - A list of draggable items.\n     * @param {HTMLElement} container - The container element that holds the draggable items.\n     */\n    handleDragDropModal: async function(listItem, e, dragDropElementList, container) {\n        const modal = await Modal.create({\n            title: getString('movecontent', 'moodle', this.getNodeText(e.target.closest('li.slot'))),\n            body: listItem.outerHTML,\n            footer: '',\n            show: true,\n            removeOnClose: true,\n        });\n        const utils = this;\n        const root = modal.getRoot();\n        root.on(ModalEvents.shown, function() {\n            // Focus on the first link.\n            root[0].querySelector('a').focus();\n\n            // Add keyboard (space and enter) and mouse support when we click on the link to drag drop.\n            const listLinks = root[0].querySelectorAll('a');\n            listLinks.forEach((link) => {\n                link.addEventListener('click', function(event) {\n                    utils.handleDragDropEvent(event, container, dragDropElementList);\n                    modal.destroy();\n                });\n                link.addEventListener('keydown', (event) => {\n                    if (event.key === 'Enter' || event.key === ' ') {\n                        utils.handleDragDropEvent(event, container, dragDropElementList);\n                        modal.destroy();\n                    }\n                });\n            });\n\n        });\n    },\n\n    /**\n     * Handles the move action for a drag-and-drop operation.\n     *\n     * This function is triggered by an event (e.g., click or keydown).\n     * @param {Event} event - The event object triggered by the user interaction (e.g., click or keydown).\n     * @param {HTMLElement} container - The container element that holds the draggable items.\n     * @param {Array} dragDropElementList - A list of draggable items.\n     */\n    handleMoveAction: function(event, container, dragDropElementList) {\n        const dropParent = event.target.closest('.dropready');\n        const dropTargetElement = document.querySelectorAll('ul.section li');\n        const currentPosition = Array.from(dropTargetElement).map(item => item.id).indexOf(dropParent.id);\n\n        // Build the list using the buildList function.\n        this.buildListItem(dropTargetElement, currentPosition).then((listItem) => {\n            // Show the modal with the generated list as the body content.\n            this.handleDragDropModal(listItem, event, dragDropElementList, container);\n            return true;\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Handles the actual drag-and-drop event, moving the dragged item to the selected drop target.\n     *\n     * @param {Event} event - The event object triggered by a user interaction (click or keydown).\n     * @param {HTMLElement} container - The container element that holds the draggable items.\n     * @param {Array} dragDropElementList - A list of draggable items.\n     */\n    handleDragDropEvent: function(event, container, dragDropElementList) {\n        const dropZoneNode = container.getElement('#' + event.target.dataset.dropzoneid);\n        const dragDropNodeId = event.target.closest('ul').dataset.dragitemid;\n        // Move using keyboard is a little different. We do not want it to change the page.\n        dragDropElementList.forEach((dragItem) => {\n            if (dragItem.id === dragDropNodeId) {\n                dropZoneNode.dataset.moveafter = true;\n                dragItem.reactive.dispatch('moveQuestion', dragItem.getDraggableData(), dropZoneNode);\n                dropZoneNode.dataset.moveafter = '';\n                return true;\n            }\n            return false;\n        });\n    },\n\n    /**\n     * Retrieves the text content of a DOM node, prioritizing accessible attributes such as `aria-label` and `aria-labelledby`.\n     *\n     * @param {HTMLElement} node - The DOM node to extract text from.\n     *\n     * @returns {string} The extracted text content or an empty string if no text is found.\n     */\n    getNodeText: function(node) {\n        let text = '';\n\n        // Try to resolve using aria-label first.\n        text = node.getAttribute('aria-label') || '';\n        if (text.length > 0) {\n            return text;\n        }\n\n        // Now try to resolve using aria-labelledby.\n        const labelledByNodeId = node.getAttribute('aria-labelledby');\n        if (labelledByNodeId) {\n            const labelNode = document.getElementById(labelledByNodeId);\n            if (labelNode && labelNode.textContent.trim().length > 0) {\n                return labelNode.textContent.trim();\n            }\n        }\n\n        // The valid node types to get text from.\n        const nodes = node.querySelectorAll('h2, h3, h4, h5, span:not(.actions):not(.menu-action-text),' +\n            ' p, div.no-overflow, div.dimmed_text');\n\n        // Iterate over the found nodes to extract text\n        nodes.forEach(function(node) {\n            if (text === '') {\n                const nodeText = node.textContent.trim();\n                if (nodeText !== '') {\n                    text = nodeText;\n                }\n            }\n        });\n\n        if (text !== '') {\n            return text;\n        }\n\n        return ''; // Return an empty string if no text is found\n    }\n};\nexport {\n    dragdropUtils,\n};\n"],"names":["prefetchStrings","dragdropUtils","buildListItem","async","dropTargetElement","currentPosition","ul","document","createElement","setAttribute","utils","this","promises","forEach","e","index","promise","listLink","listItem","textContent","getNodeText","id","appendChild","push","Promise","all","handleDragDropModal","dragDropElementList","container","modal","Modal","create","title","target","closest","body","outerHTML","footer","show","removeOnClose","root","getRoot","on","ModalEvents","shown","querySelector","focus","querySelectorAll","link","addEventListener","event","handleDragDropEvent","destroy","key","handleMoveAction","dropParent","Array","from","map","item","indexOf","then","catch","Notification","exception","dropZoneNode","getElement","dataset","dropzoneid","dragDropNodeId","dragitemid","dragItem","moveafter","reactive","dispatch","getDraggableData","node","text","getAttribute","length","labelledByNodeId","labelNode","getElementById","trim","nodeText"],"mappings":";;;;;;;uSA6BSA,gBAAgB,OAAQ,CAAC,cAAe,sBAC3CC,cAAgB,CAWlBC,cAAeC,eAAeC,kBAAmBC,uBACvCC,GAAKC,SAASC,cAAc,MAClCF,GAAGG,aAAa,QAAS,gCACnBC,MAAQC,KAERC,SAAW,UACjBR,kBAAkBS,SAAQ,CAACC,EAAGC,YACtBA,QAAUV,iBAAmBA,kBAAoBU,MAAQ,EAAG,OACtDC,QAAWb,uBACPc,SAAWV,SAASC,cAAc,KAClCU,SAAWX,SAASC,cAAc,MACxCS,SAASE,kBAAoB,mBAAU,cAAe,WAAYT,MAAMU,YAAYN,IACpFG,SAASR,aAAa,OAAQ,UAC9BQ,SAASR,aAAa,WAAY,KAClCQ,SAASR,aAAa,kBAAmBK,EAAEO,IAE3CH,SAASI,YAAYL,UACrBX,GAAGgB,YAAYJ,UATFf,GAWjBS,SAASW,KAAKP,cAEdV,GAAGG,aAAa,kBAAmBK,EAAEO,aAIvCG,QAAQC,IAAIb,UACXN,IAYXoB,oBAAqBvB,eAAee,SAAUJ,EAAGa,oBAAqBC,iBAC5DC,YAAcC,eAAMC,OAAO,CAC7BC,OAAO,mBAAU,cAAe,SAAUrB,KAAKS,YAAYN,EAAEmB,OAAOC,QAAQ,aAC5EC,KAAMjB,SAASkB,UACfC,OAAQ,GACRC,MAAM,EACNC,eAAe,IAEb7B,MAAQC,KACR6B,KAAOX,MAAMY,UACnBD,KAAKE,GAAGC,sBAAYC,OAAO,WAEvBJ,KAAK,GAAGK,cAAc,KAAKC,QAGTN,KAAK,GAAGO,iBAAiB,KACjClC,SAASmC,OACfA,KAAKC,iBAAiB,SAAS,SAASC,OACpCxC,MAAMyC,oBAAoBD,MAAOtB,UAAWD,qBAC5CE,MAAMuB,aAEVJ,KAAKC,iBAAiB,WAAYC,QACZ,UAAdA,MAAMG,KAAiC,MAAdH,MAAMG,MAC/B3C,MAAMyC,oBAAoBD,MAAOtB,UAAWD,qBAC5CE,MAAMuB,qBAgB1BE,iBAAkB,SAASJ,MAAOtB,UAAWD,2BACnC4B,WAAaL,MAAMjB,OAAOC,QAAQ,cAClC9B,kBAAoBG,SAASwC,iBAAiB,iBAC9C1C,gBAAkBmD,MAAMC,KAAKrD,mBAAmBsD,KAAIC,MAAQA,KAAKtC,KAAIuC,QAAQL,WAAWlC,SAGzFnB,cAAcE,kBAAmBC,iBAAiBwD,MAAM3C,gBAEpDQ,oBAAoBR,SAAUgC,MAAOvB,oBAAqBC,YACxD,KACRkC,MAAMC,sBAAaC,YAU1Bb,oBAAqB,SAASD,MAAOtB,UAAWD,2BACtCsC,aAAerC,UAAUsC,WAAW,IAAMhB,MAAMjB,OAAOkC,QAAQC,YAC/DC,eAAiBnB,MAAMjB,OAAOC,QAAQ,MAAMiC,QAAQG,WAE1D3C,oBAAoBd,SAAS0D,UACrBA,SAASlD,KAAOgD,iBAChBJ,aAAaE,QAAQK,WAAY,EACjCD,SAASE,SAASC,SAAS,eAAgBH,SAASI,mBAAoBV,cACxEA,aAAaE,QAAQK,UAAY,IAC1B,MAanBpD,YAAa,SAASwD,UACdC,KAAO,MAGXA,KAAOD,KAAKE,aAAa,eAAiB,GACtCD,KAAKE,OAAS,SACPF,WAILG,iBAAmBJ,KAAKE,aAAa,sBACvCE,iBAAkB,OACZC,UAAY1E,SAAS2E,eAAeF,qBACtCC,WAAaA,UAAU9D,YAAYgE,OAAOJ,OAAS,SAC5CE,UAAU9D,YAAYgE,cAKvBP,KAAK7B,iBAAiB,kGAI9BlC,SAAQ,SAAS+D,SACN,KAATC,KAAa,OACPO,SAAWR,KAAKzD,YAAYgE,OACjB,KAAbC,WACAP,KAAOO,cAKN,KAATP,KACOA,KAGJ"}