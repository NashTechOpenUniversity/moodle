define("mod_quiz/dragdrop/mutations",["exports","core/ajax","mod_quiz/dragdrop/selectors","mod_quiz/quiz_utils"],(function(_exports,_ajax,_selectors,_quiz_utils){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_ajax=_interopRequireDefault(_ajax),_selectors=_interopRequireDefault(_selectors);return _exports.default=class{async moveQuestion(stateManager,dragData,dropZoneNode){let previousPage,previousNode,previousSlotId=0;const goingUp=dragData.slotorder>dropZoneNode.dataset.slotorder;previousNode=goingUp?dropZoneNode.previousSibling:dropZoneNode,previousNode.id.includes("page")?previousPage=_quiz_utils.util.getNumber(previousNode.id):(previousPage=previousNode.dataset.page,previousSlotId=_quiz_utils.util.getNumber(previousNode.id));const result=await this._moveQuestionToSlot(dragData.quizid,_quiz_utils.util.getNumber(dragData.id),_quiz_utils.util.getNumber(dropZoneNode.closest(_selectors.default.MAIN_SECTION).id),previousSlotId,previousPage);this.processUpdates(stateManager,result,dropZoneNode,dragData,goingUp)}async _moveQuestionToSlot(quizid,slotid,sectionid,previousslotid,page){return _ajax.default.call([{methodname:"mod_quiz_move_slot",args:{quizid:quizid,id:slotid,sectionid:sectionid,previousid:previousslotid,page:page}}])[0]}async processUpdates(stateManager,result,dropZoneNode,dragData,goingup){if(result.visible){const updateUI={name:"question",action:"put",fields:{id:dragData.id,ismove:!0,goingup:goingup,dropzoneslotorder:dropZoneNode.dataset.slotorder,dragslotoder:dragData.slotorder,previousslotid:dropZoneNode.id}};stateManager.processUpdates([updateUI]);const revertIsMoveState={name:"question",action:"put",fields:{id:dragData.id,ismove:!1}};stateManager.processUpdates([revertIsMoveState])}}},_exports.default}));

//# sourceMappingURL=mutations.min.js.map