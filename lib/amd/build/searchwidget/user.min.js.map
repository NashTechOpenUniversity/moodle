{"version":3,"file":"user.min.js","sources":["../../src/searchwidget/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for student within the report.\n *\n * @module    core/searchwidget/user\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport UserSearch from 'core_user/comboboxsearch/user';\nimport Url from 'core/url';\nimport * as Repository from 'core/searchwidget/repository';\n\nexport default class User extends UserSearch {\n\n    static extraParams;\n    constructor() {\n        super();\n    }\n\n    static init(extraParams = null) {\n        User.extraParams = extraParams;\n        return new User();\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    fetchDataset() {\n        if (User?.extraParams?.cmid === undefined) {\n            return Repository.userFetch({courseid: User.extraParams.courseid},\n                User.extraParams.service).then((r) => r.users);\n        }\n\n        const onlyGraded = !!parseInt(User.extraParams?.params?.onlygraded ?? 0);\n\n        const params = {\n            cmid: User.extraParams.cmid,\n            mode: User.extraParams.reportmode,\n            tableclass: User.extraParams.tableclass,\n            optionclass: User.extraParams.optionclass,\n            attempts: User.extraParams?.params?.attempts ?? \"\",\n            states: User.extraParams?.params?.states ?? \"\",\n            onlygraded: onlyGraded,\n        };\n\n        return Repository.userFetch(params,\n            User.extraParams.service).then((r) => {\n                // We need to update more extra strings to allow users to search more fields like: username,\n                // custom profile fields.\n                let extraStrings = [\n                    'username',\n                ];\n\n                if (r.users.length > 0) {\n                    // Update the profile_field key for additional fields.\n                    // Retrieve the first record to analyze its index.\n                    Object.keys(r.users[0]).forEach(key => {\n                        // We only get the profile fields key.\n                        if (/^profile_field_(.*)$/.test(key)) {\n                            extraStrings.push(key);\n                        }\n                    });\n                }\n                // Update required strings to allow searching by profile_field.\n                super.updateRequiredStrings(extraStrings);\n\n                return r.users;\n            });\n    }\n\n    /**\n     * Build up the view all link.\n     *\n     * @returns {string|*}\n     */\n    selectAllResultsLink() {\n        return Url.relativeUrl(User.extraParams.path, {\n            ...User.extraParams.params,\n            gpr_search: this.getSearchTerm(),\n        }, false);\n    }\n\n    /**\n     * Build up the link that is dedicated to a particular result.\n     *\n     * @param {Number} userID The ID of the user selected.\n     * @returns {string|*}\n     */\n    selectOneLink(userID) {\n        return Url.relativeUrl(User.extraParams.path, {\n            ...User.extraParams.params,\n            gpr_search: this.getSearchTerm(),\n            gpr_userid: userID,\n        }, false);\n    }\n}\n"],"names":["User","UserSearch","constructor","extraParams","fetchDataset","undefined","cmid","Repository","userFetch","courseid","service","then","r","users","onlyGraded","parseInt","_User$extraParams2","params","_User$extraParams2$pa","onlygraded","mode","reportmode","tableclass","optionclass","attempts","_User$extraParams3","_User$extraParams3$pa","states","_User$extraParams4","_User$extraParams4$pa","extraStrings","length","Object","keys","forEach","key","test","push","updateRequiredStrings","selectAllResultsLink","Url","relativeUrl","path","gpr_search","this","getSearchTerm","selectOneLink","userID","gpr_userid"],"mappings":"q0CA0BqBA,aAAaC,cAG9BC,wCAIYC,mEAAc,YACtBH,KAAKG,YAAcA,YACZ,IAAIH,KAQfI,4OACoCC,KAA5BL,MAAAA,gCAAAA,KAAMG,kEAAaG,aACZC,WAAWC,UAAU,CAACC,SAAUT,KAAKG,YAAYM,UACpDT,KAAKG,YAAYO,SAASC,MAAMC,GAAMA,EAAEC,cAG1CC,aAAeC,kEAASf,KAAKG,yEAALa,mBAAkBC,+CAAlBC,sBAA0BC,kEAAc,GAEhEF,OAAS,CACXX,KAAMN,KAAKG,YAAYG,KACvBc,KAAMpB,KAAKG,YAAYkB,WACvBC,WAAYtB,KAAKG,YAAYmB,WAC7BC,YAAavB,KAAKG,YAAYoB,YAC9BC,mEAAUxB,KAAKG,yEAALsB,mBAAkBR,+CAAlBS,sBAA0BF,kEAAY,GAChDG,iEAAQ3B,KAAKG,yEAALyB,mBAAkBX,+CAAlBY,sBAA0BF,gEAAU,GAC5CR,WAAYL,mBAGTP,WAAWC,UAAUS,OACxBjB,KAAKG,YAAYO,SAASC,MAAMC,QAGxBkB,aAAe,CACf,mBAGAlB,EAAEC,MAAMkB,OAAS,GAGjBC,OAAOC,KAAKrB,EAAEC,MAAM,IAAIqB,SAAQC,MAExB,uBAAuBC,KAAKD,MAC5BL,aAAaO,KAAKF,cAKxBG,sBAAsBR,cAErBlB,EAAEC,SASrB0B,8BACWC,aAAIC,YAAYzC,KAAKG,YAAYuC,KAAM,IACvC1C,KAAKG,YAAYc,OACpB0B,WAAYC,KAAKC,kBAClB,GASPC,cAAcC,eACHP,aAAIC,YAAYzC,KAAKG,YAAYuC,KAAM,IACvC1C,KAAKG,YAAYc,OACpB0B,WAAYC,KAAKC,gBACjBG,WAAYD,SACb,0FAnFU/C"}