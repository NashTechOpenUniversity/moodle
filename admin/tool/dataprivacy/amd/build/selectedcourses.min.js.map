{"version":3,"sources":["../src/selectedcourses.js"],"names":["SelectedCourses","contextId","requestId","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","e","preventDefault","modal","getRoot","find","submit","formData","serialize","indexOf","customSelect","invalidText","addClass","attr","then","value","empty","append","catch","Notification","exception","Ajax","call","methodname","args","requestid","done","data","warnings","length","setBody","getBody","destroy","document","location","reload","fail","ModalFactory","create","type","types","SAVE_CANCEL","title","body","large","removeOnClose","buttons","save","on","ModalEvents","submitForm","bind","submitFormAjax","show"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Selected courses.\n *\n * @module     tool_dataprivacy/selectedcourses\n * @package    tool_dataprivacy\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since  Moodle 4.0\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\n\nprefetchStrings('tool_dataprivacy', [\n    'selectedcourses',\n    'approverequest',\n    'errornoselectedcourse',\n]);\n\n/**\n * Selected Courses popup modal.\n *\n */\nexport default class SelectedCourses {\n    /**\n     * @var {String} contextId Context ID to load the fragment.\n     * @private\n     */\n    contextId = 0;\n\n    /**\n     * @var {String} requestId ID of data export request.\n     * @private\n     */\n    requestId = 0;\n\n    /**\n     * @var {Promise}\n     * @private\n     */\n    strings = null;\n\n    /**\n     * Constructor\n     *\n     * @param {String} contextId Context ID to load the fragment.\n     * @param {String} requestId ID of data export request.\n     */\n    constructor(contextId, requestId) {\n\n        this.contextId = contextId;\n        this.requestId = requestId;\n        // Now create the modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('selectcourses', 'tool_dataprivacy'),\n            body: this.getBody({requestid: requestId}),\n            large: true,\n            removeOnClose: true,\n            buttons: {\n                save: getString('approverequest', 'tool_dataprivacy'),\n            },\n        }).then(modal => {\n                this.modal = modal;\n\n                return modal;\n            }).then(modal => {\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n\n                // We also catch the form submit event and use it to submit the form with ajax.\n                modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n                modal.show();\n                return modal;\n            }).catch(Notification.exception);\n    }\n\n    /**\n     * Get body of modal.\n     *\n     * @method getBody\n     * @param {Object} formdata\n     * @private\n     * @return {Promise}\n     */\n    getBody = (formdata) => {\n\n        let params = null;\n        if (typeof formdata !== \"undefined\") {\n            params = {jsonformdata: JSON.stringify(formdata)};\n        }\n        // Get the content of the modal.\n        return Fragment.loadFragment('tool_dataprivacy', 'selectcourses_form', this.contextId, params);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    submitForm = (e) => {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Submit select courses form using ajax.\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    submitFormAjax = (e) => {\n\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        let formData = this.modal.getRoot().find('form').serialize();\n\n        if (formData.indexOf('coursecontextids') === -1) {\n            const customSelect = this.modal.getRoot().find('.custom-select');\n            const invalidText = this.modal.getRoot().find('.invalid-feedback');\n            customSelect.addClass('is-invalid');\n            invalidText.attr('style', 'display: block');\n            getString('errornoselectedcourse', 'tool_dataprivacy').then(value => {\n                invalidText.empty().append(value);\n                return;\n            }).catch(Notification.exception);\n            return;\n        }\n\n        Ajax.call([{\n            methodname: 'tool_dataprivacy_submit_selected_courses_form',\n            args: {requestid: this.requestId, jsonformdata: JSON.stringify(formData)},\n            done: (data) => {\n                if (data.warnings.length > 0) {\n                    this.modal.setBody(this.getBody(formData));\n                } else {\n                    this.modal.destroy();\n                    document.location.reload();\n                }\n            },\n            fail: Notification.exception\n        }]);\n    };\n}\n"],"file":"selectedcourses.min.js"}